
01_EV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08006b70  08006b70  00007b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c74  08006c74  000080d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c74  08006c74  00007c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c7c  08006c7c  000080d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c7c  08006c7c  00007c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c80  08006c80  00007c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08006c84  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200000d4  08006d58  000080d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08006d58  00008480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e31  00000000  00000000  00008104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c43  00000000  00000000  0001df35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  00021b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe1  00000000  00000000  00023008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b19d  00000000  00000000  00023fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d099  00000000  00000000  0003f186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009520a  00000000  00000000  0005c21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cd8  00000000  00000000  000f146c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f7144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b58 	.word	0x08006b58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	08006b58 	.word	0x08006b58

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <IsButtonPress>:
		{Btn4_Port, Btn4_Pin, 0, 0},
		{Btn5_Port, Btn5_Pin, 0, 0}
};

bool IsButtonPress(uint8_t num)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800059a:	2300      	movs	r3, #0
 800059c:	73fb      	strb	r3, [r7, #15]

	if(button[num].prevTime == 0)
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	493c      	ldr	r1, [pc, #240]	@ (8000694 <IsButtonPress+0x104>)
 80005a2:	4613      	mov	r3, r2
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	440b      	add	r3, r1
 80005ac:	3308      	adds	r3, #8
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10b      	bne.n	80005cc <IsButtonPress+0x3c>
	{
		button[num].prevTime = HAL_GetTick();
 80005b4:	79fc      	ldrb	r4, [r7, #7]
 80005b6:	f001 fe1d 	bl	80021f4 <HAL_GetTick>
 80005ba:	4602      	mov	r2, r0
 80005bc:	4935      	ldr	r1, [pc, #212]	@ (8000694 <IsButtonPress+0x104>)
 80005be:	4623      	mov	r3, r4
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4423      	add	r3, r4
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	440b      	add	r3, r1
 80005c8:	3308      	adds	r3, #8
 80005ca:	601a      	str	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(button[num].port, button[num].pinNumber) == button[num].onState)
 80005cc:	79fa      	ldrb	r2, [r7, #7]
 80005ce:	4931      	ldr	r1, [pc, #196]	@ (8000694 <IsButtonPress+0x104>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	79fa      	ldrb	r2, [r7, #7]
 80005de:	492d      	ldr	r1, [pc, #180]	@ (8000694 <IsButtonPress+0x104>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	440b      	add	r3, r1
 80005ea:	3304      	adds	r3, #4
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	f002 f8c6 	bl	8002780 <HAL_GPIO_ReadPin>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4618      	mov	r0, r3
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	4926      	ldr	r1, [pc, #152]	@ (8000694 <IsButtonPress+0x104>)
 80005fc:	4613      	mov	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	3306      	adds	r3, #6
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4298      	cmp	r0, r3
 800060c:	d13c      	bne.n	8000688 <IsButtonPress+0xf8>
	{
		uint32_t currTime = HAL_GetTick();
 800060e:	f001 fdf1 	bl	80021f4 <HAL_GetTick>
 8000612:	60b8      	str	r0, [r7, #8]
		if(currTime - button[num].prevTime > DEBOUNCE_DELAY)
 8000614:	79fa      	ldrb	r2, [r7, #7]
 8000616:	491f      	ldr	r1, [pc, #124]	@ (8000694 <IsButtonPress+0x104>)
 8000618:	4613      	mov	r3, r2
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	4413      	add	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	440b      	add	r3, r1
 8000622:	3308      	adds	r3, #8
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	2b32      	cmp	r3, #50	@ 0x32
 800062c:	d92c      	bls.n	8000688 <IsButtonPress+0xf8>
		{
			if(HAL_GPIO_ReadPin(button[num].port, button[num].pinNumber) == button[num].onState)
 800062e:	79fa      	ldrb	r2, [r7, #7]
 8000630:	4918      	ldr	r1, [pc, #96]	@ (8000694 <IsButtonPress+0x104>)
 8000632:	4613      	mov	r3, r2
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	6818      	ldr	r0, [r3, #0]
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	4914      	ldr	r1, [pc, #80]	@ (8000694 <IsButtonPress+0x104>)
 8000642:	4613      	mov	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	440b      	add	r3, r1
 800064c:	3304      	adds	r3, #4
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f002 f895 	bl	8002780 <HAL_GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	4618      	mov	r0, r3
 800065a:	79fa      	ldrb	r2, [r7, #7]
 800065c:	490d      	ldr	r1, [pc, #52]	@ (8000694 <IsButtonPress+0x104>)
 800065e:	4613      	mov	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	3306      	adds	r3, #6
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4298      	cmp	r0, r3
 800066e:	d101      	bne.n	8000674 <IsButtonPress+0xe4>
			{
				result = true;
 8000670:	2301      	movs	r3, #1
 8000672:	73fb      	strb	r3, [r7, #15]
			}
			button[num].prevTime = currTime;
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	4907      	ldr	r1, [pc, #28]	@ (8000694 <IsButtonPress+0x104>)
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	440b      	add	r3, r1
 8000682:	3308      	adds	r3, #8
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	601a      	str	r2, [r3, #0]
		}
	}

	return result;
 8000688:	7bfb      	ldrb	r3, [r7, #15]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	bf00      	nop
 8000694:	20000000 	.word	0x20000000

08000698 <GetPressedButton>:

uint8_t GetPressedButton()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	uint8_t num = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	if(IsButtonPress(0)) num = 1;
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff74 	bl	8000590 <IsButtonPress>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <GetPressedButton+0x1a>
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
	if(IsButtonPress(1)) num = 2;
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff6c 	bl	8000590 <IsButtonPress>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <GetPressedButton+0x2a>
 80006be:	2302      	movs	r3, #2
 80006c0:	71fb      	strb	r3, [r7, #7]
	if(IsButtonPress(2)) num = 3;
 80006c2:	2002      	movs	r0, #2
 80006c4:	f7ff ff64 	bl	8000590 <IsButtonPress>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <GetPressedButton+0x3a>
 80006ce:	2303      	movs	r3, #3
 80006d0:	71fb      	strb	r3, [r7, #7]
	if(IsButtonPress(3)) num = 4;
 80006d2:	2003      	movs	r0, #3
 80006d4:	f7ff ff5c 	bl	8000590 <IsButtonPress>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <GetPressedButton+0x4a>
 80006de:	2304      	movs	r3, #4
 80006e0:	71fb      	strb	r3, [r7, #7]
	if(IsButtonPress(4)) num = 5;
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff ff54 	bl	8000590 <IsButtonPress>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <GetPressedButton+0x5a>
 80006ee:	2305      	movs	r3, #5
 80006f0:	71fb      	strb	r3, [r7, #7]
	return num;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <buzzerInit>:

#include "buzzer.h"

void buzzerInit()
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4802      	ldr	r0, [pc, #8]	@ (800070c <buzzerInit+0x10>)
 8000704:	f003 fe04 	bl	8004310 <HAL_TIM_PWM_Start>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000210 	.word	0x20000210

08000710 <CallBuzzer>:

void CallBuzzer()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000714:	2032      	movs	r0, #50	@ 0x32
 8000716:	f001 fd79 	bl	800220c <HAL_Delay>
	Buzzer_Pin->PSC = Mi; // mi
 800071a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800071e:	f44f 7298 	mov.w	r2, #304	@ 0x130
 8000722:	629a      	str	r2, [r3, #40]	@ 0x28
	Buzzer_Pin->CCR1 = 500;
 8000724:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000728:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800072c:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(qNote);
 800072e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000732:	f001 fd6b 	bl	800220c <HAL_Delay>
	Buzzer_Pin->CCR1 = 0;
 8000736:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800073a:	2200      	movs	r2, #0
 800073c:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(10);
 800073e:	200a      	movs	r0, #10
 8000740:	f001 fd64 	bl	800220c <HAL_Delay>

	Buzzer_Pin->PSC = Do; // Do
 8000744:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000748:	f240 127f 	movw	r2, #383	@ 0x17f
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
	Buzzer_Pin->CCR1 = 500;
 800074e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000752:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000756:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_Delay(qNote);
 8000758:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800075c:	f001 fd56 	bl	800220c <HAL_Delay>
	Buzzer_Pin->CCR1 = 0;
 8000760:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000764:	2200      	movs	r2, #0
 8000766:	635a      	str	r2, [r3, #52]	@ 0x34

	Buzzer_Pin->PSC = 0;
 8000768:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	@ 0x28
	Buzzer_Pin->CCR1 = 0;
 8000770:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000774:	2200      	movs	r2, #0
 8000776:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <lcd_command>:

#include "i2c_lcd.h"

void lcd_command(uint8_t command)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af02      	add	r7, sp, #8
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = command & 0xf0;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f023 030f 	bic.w	r3, r3, #15
 800078c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command << 4) & 0xf0;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	73bb      	strb	r3, [r7, #14]

	i2c_buffer[0] = high_nibble | 0x04 | 0x08;	// en_pin = 1, rs_pin = 0, rw_pin = 0, backlight = 1
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	f043 030c 	orr.w	r3, r3, #12
 800079a:	b2db      	uxtb	r3, r3
 800079c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08;	// en_pin = 0, rs_pin = 0, rw_pin = 0, backlight = 1
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08;	// en_pin = 1, rs_pin = 0, rw_pin = 0, backlight = 1
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	f043 030c 	orr.w	r3, r3, #12
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08;	// en_pin = 0, rs_pin = 0, rw_pin = 0, backlight = 1
 80007b2:	7bbb      	ldrb	r3, [r7, #14]
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 80007bc:	bf00      	nop
 80007be:	f107 0208 	add.w	r2, r7, #8
 80007c2:	2364      	movs	r3, #100	@ 0x64
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2304      	movs	r3, #4
 80007c8:	214e      	movs	r1, #78	@ 0x4e
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <lcd_command+0x64>)
 80007cc:	f002 f966 	bl	8002a9c <HAL_I2C_Master_Transmit>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f3      	bne.n	80007be <lcd_command+0x42>
//	{
//		HAL_Delay(1);
//	}
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000160 	.word	0x20000160

080007e4 <lcd_data>:

void lcd_data(uint8_t data)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];

	high_nibble = data & 0xf0;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	f023 030f 	bic.w	r3, r3, #15
 80007f4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data << 4) & 0xf0;
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	011b      	lsls	r3, r3, #4
 80007fa:	73bb      	strb	r3, [r7, #14]

	i2c_buffer[0] = high_nibble | 0x05 | 0x08;	// en_pin = 1, rs_pin = 1, rw_pin = 0, backlight = 1
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	f043 030d 	orr.w	r3, r3, #13
 8000802:	b2db      	uxtb	r3, r3
 8000804:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08;	// en_pin = 0, rs_pin = 1, rw_pin = 0, backlight = 1
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f043 0309 	orr.w	r3, r3, #9
 800080c:	b2db      	uxtb	r3, r3
 800080e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08;	// en_pin = 1, rs_pin = 1, rw_pin = 0, backlight = 1
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	f043 030d 	orr.w	r3, r3, #13
 8000816:	b2db      	uxtb	r3, r3
 8000818:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08;	// en_pin = 0, rs_pin = 1, rw_pin = 0, backlight = 1
 800081a:	7bbb      	ldrb	r3, [r7, #14]
 800081c:	f043 0309 	orr.w	r3, r3, #9
 8000820:	b2db      	uxtb	r3, r3
 8000822:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS, i2c_buffer, 4, 100) != HAL_OK);
 8000824:	bf00      	nop
 8000826:	f107 0208 	add.w	r2, r7, #8
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	9300      	str	r3, [sp, #0]
 800082e:	2304      	movs	r3, #4
 8000830:	214e      	movs	r1, #78	@ 0x4e
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <lcd_data+0x64>)
 8000834:	f002 f932 	bl	8002a9c <HAL_I2C_Master_Transmit>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f3      	bne.n	8000826 <lcd_data+0x42>
//	{
//		HAL_Delay(1);
//	}
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000160 	.word	0x20000160

0800084c <i2c_lcd_init>:

void i2c_lcd_init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8000850:	2032      	movs	r0, #50	@ 0x32
 8000852:	f001 fcdb 	bl	800220c <HAL_Delay>
	lcd_command(0x33);
 8000856:	2033      	movs	r0, #51	@ 0x33
 8000858:	f7ff ff90 	bl	800077c <lcd_command>
	HAL_Delay(5);
 800085c:	2005      	movs	r0, #5
 800085e:	f001 fcd5 	bl	800220c <HAL_Delay>
	lcd_command(0x32);
 8000862:	2032      	movs	r0, #50	@ 0x32
 8000864:	f7ff ff8a 	bl	800077c <lcd_command>
	HAL_Delay(5);
 8000868:	2005      	movs	r0, #5
 800086a:	f001 fccf 	bl	800220c <HAL_Delay>
	lcd_command(0x28);
 800086e:	2028      	movs	r0, #40	@ 0x28
 8000870:	f7ff ff84 	bl	800077c <lcd_command>
	HAL_Delay(5);
 8000874:	2005      	movs	r0, #5
 8000876:	f001 fcc9 	bl	800220c <HAL_Delay>
	lcd_command(DISPLAY_ON);
 800087a:	200c      	movs	r0, #12
 800087c:	f7ff ff7e 	bl	800077c <lcd_command>
	HAL_Delay(5);
 8000880:	2005      	movs	r0, #5
 8000882:	f001 fcc3 	bl	800220c <HAL_Delay>
	lcd_command(0x06);
 8000886:	2006      	movs	r0, #6
 8000888:	f7ff ff78 	bl	800077c <lcd_command>
	HAL_Delay(5);
 800088c:	2005      	movs	r0, #5
 800088e:	f001 fcbd 	bl	800220c <HAL_Delay>
	lcd_command(CLEAR_DISPLAY);
 8000892:	2001      	movs	r0, #1
 8000894:	f7ff ff72 	bl	800077c <lcd_command>
	HAL_Delay(2);
 8000898:	2002      	movs	r0, #2
 800089a:	f001 fcb7 	bl	800220c <HAL_Delay>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <lcd_string>:

void lcd_string(char *str)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 80008aa:	e006      	b.n	80008ba <lcd_string+0x18>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	1c5a      	adds	r2, r3, #1
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff95 	bl	80007e4 <lcd_data>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f4      	bne.n	80008ac <lcd_string+0xa>
}
 80008c2:	bf00      	nop
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <move_cursor>:

void move_cursor(uint8_t row, uint8_t col)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | col);
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	019b      	lsls	r3, r3, #6
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff44 	bl	800077c <lcd_command>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <photoInit>:
		{PHOTO_INT2_Port, PHOTO_INT1_Pin, 1},
		{PHOTO_INT3_Port, PHOTO_INT1_Pin, 1}
};

void photoInit()
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
//	HAL_GPIO_EXTI_IRQHandler(PHOTO_INT1_Pin);
//	HAL_GPIO_EXTI_IRQHandler(PHOTO_INT2_Pin);
//	HAL_GPIO_EXTI_IRQHandler(PHOTO_INT3_Pin);
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af02      	add	r7, sp, #8
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000916:	f107 020f 	add.w	r2, r7, #15
 800091a:	1df9      	adds	r1, r7, #7
 800091c:	2364      	movs	r3, #100	@ 0x64
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2301      	movs	r3, #1
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <RC522_SPI_Transfer+0x28>)
 8000924:	f003 f935 	bl	8003b92 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000928:	7bfb      	ldrb	r3, [r7, #15]
}
 800092a:	4618      	mov	r0, r3
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200001b4 	.word	0x200001b4

08000938 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2140      	movs	r1, #64	@ 0x40
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <Write_MFRC522+0x48>)
 800094e:	f001 ff2f 	bl	80027b0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ffd4 	bl	800090c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ffd0 	bl	800090c <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2140      	movs	r1, #64	@ 0x40
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <Write_MFRC522+0x48>)
 8000972:	f001 ff1d 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020400 	.word	0x40020400

08000984 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	@ 0x40
 8000992:	480f      	ldr	r0, [pc, #60]	@ (80009d0 <Read_MFRC522+0x4c>)
 8000994:	f001 ff0c 	bl	80027b0 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	b25b      	sxtb	r3, r3
 800099e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80009a2:	b25b      	sxtb	r3, r3
 80009a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ffad 	bl	800090c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ffaa 	bl	800090c <RC522_SPI_Transfer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2140      	movs	r1, #64	@ 0x40
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <Read_MFRC522+0x4c>)
 80009c2:	f001 fef5 	bl	80027b0 <HAL_GPIO_WritePin>

	return val;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020400 	.word	0x40020400

080009d4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffcc 	bl	8000984 <Read_MFRC522>
 80009ec:	4603      	mov	r3, r0
 80009ee:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80009f0:	7bfa      	ldrb	r2, [r7, #15]
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff9b 	bl	8000938 <Write_MFRC522>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	460a      	mov	r2, r1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	4613      	mov	r3, r2
 8000a18:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffb1 	bl	8000984 <Read_MFRC522>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000a26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	b25a      	sxtb	r2, r3
 8000a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a32:	4013      	ands	r3, r2
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff7b 	bl	8000938 <Write_MFRC522>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000a4e:	2014      	movs	r0, #20
 8000a50:	f7ff ff98 	bl	8000984 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000a54:	2103      	movs	r1, #3
 8000a56:	2014      	movs	r0, #20
 8000a58:	f7ff ffbc 	bl	80009d4 <SetBitMask>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000a64:	210f      	movs	r1, #15
 8000a66:	2001      	movs	r0, #1
 8000a68:	f7ff ff66 	bl	8000938 <Write_MFRC522>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2140      	movs	r1, #64	@ 0x40
 8000a78:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <MFRC522_Init+0x54>)
 8000a7a:	f001 fe99 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2180      	movs	r1, #128	@ 0x80
 8000a82:	4811      	ldr	r0, [pc, #68]	@ (8000ac8 <MFRC522_Init+0x58>)
 8000a84:	f001 fe94 	bl	80027b0 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000a88:	f7ff ffea 	bl	8000a60 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000a8c:	218d      	movs	r1, #141	@ 0x8d
 8000a8e:	202a      	movs	r0, #42	@ 0x2a
 8000a90:	f7ff ff52 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000a94:	213e      	movs	r1, #62	@ 0x3e
 8000a96:	202b      	movs	r0, #43	@ 0x2b
 8000a98:	f7ff ff4e 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000a9c:	211e      	movs	r1, #30
 8000a9e:	202d      	movs	r0, #45	@ 0x2d
 8000aa0:	f7ff ff4a 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	202c      	movs	r0, #44	@ 0x2c
 8000aa8:	f7ff ff46 	bl	8000938 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000aac:	2140      	movs	r1, #64	@ 0x40
 8000aae:	2015      	movs	r0, #21
 8000ab0:	f7ff ff42 	bl	8000938 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000ab4:	213d      	movs	r1, #61	@ 0x3d
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff ff3e 	bl	8000938 <Write_MFRC522>

	AntennaOn();
 8000abc:	f7ff ffc5 	bl	8000a4a <AntennaOn>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020800 	.word	0x40020800

08000acc <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	4613      	mov	r3, r2
 8000adc:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	d006      	beq.n	8000afe <MFRC522_ToCard+0x32>
 8000af0:	2b0e      	cmp	r3, #14
 8000af2:	d109      	bne.n	8000b08 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000af4:	2312      	movs	r3, #18
 8000af6:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000af8:	2310      	movs	r3, #16
 8000afa:	777b      	strb	r3, [r7, #29]
			break;
 8000afc:	e005      	b.n	8000b0a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000afe:	2377      	movs	r3, #119	@ 0x77
 8000b00:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000b02:	2330      	movs	r3, #48	@ 0x30
 8000b04:	777b      	strb	r3, [r7, #29]
			break;
 8000b06:	e000      	b.n	8000b0a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000b08:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000b0a:	7fbb      	ldrb	r3, [r7, #30]
 8000b0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	4619      	mov	r1, r3
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ff0f 	bl	8000938 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000b1a:	2180      	movs	r1, #128	@ 0x80
 8000b1c:	2004      	movs	r0, #4
 8000b1e:	f7ff ff74 	bl	8000a0a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000b22:	2180      	movs	r1, #128	@ 0x80
 8000b24:	200a      	movs	r0, #10
 8000b26:	f7ff ff55 	bl	80009d4 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f7ff ff03 	bl	8000938 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
 8000b36:	e00a      	b.n	8000b4e <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	2009      	movs	r0, #9
 8000b44:	f7ff fef8 	bl	8000938 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d3f0      	bcc.n	8000b38 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff feec 	bl	8000938 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b0c      	cmp	r3, #12
 8000b64:	d103      	bne.n	8000b6e <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000b66:	2180      	movs	r1, #128	@ 0x80
 8000b68:	200d      	movs	r0, #13
 8000b6a:	f7ff ff33 	bl	80009d4 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000b6e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b72:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f7ff ff05 	bl	8000984 <Read_MFRC522>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	773b      	strb	r3, [r7, #28]
        i--;
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00a      	beq.n	8000ba0 <MFRC522_ToCard+0xd4>
 8000b8a:	7f3b      	ldrb	r3, [r7, #28]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d105      	bne.n	8000ba0 <MFRC522_ToCard+0xd4>
 8000b94:	7f3a      	ldrb	r2, [r7, #28]
 8000b96:	7f7b      	ldrb	r3, [r7, #29]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0e9      	beq.n	8000b74 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	200d      	movs	r0, #13
 8000ba4:	f7ff ff31 	bl	8000a0a <ClearBitMask>

    if (i != 0)
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d052      	beq.n	8000c54 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f7ff fee8 	bl	8000984 <Read_MFRC522>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f003 031b 	and.w	r3, r3, #27
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d148      	bne.n	8000c50 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000bc2:	7f3a      	ldrb	r2, [r7, #28]
 8000bc4:	7fbb      	ldrb	r3, [r7, #30]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2b0c      	cmp	r3, #12
 8000bda:	d13b      	bne.n	8000c54 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f7ff fed1 	bl	8000984 <Read_MFRC522>
 8000be2:	4603      	mov	r3, r0
 8000be4:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000be6:	200c      	movs	r0, #12
 8000be8:	f7ff fecc 	bl	8000984 <Read_MFRC522>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8000bfa:	7f3b      	ldrb	r3, [r7, #28]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	00da      	lsls	r2, r3, #3
 8000c00:	7dfb      	ldrb	r3, [r7, #23]
 8000c02:	4413      	add	r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	e004      	b.n	8000c16 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8000c0c:	7f3b      	ldrb	r3, [r7, #28]
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	461a      	mov	r2, r3
 8000c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c14:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000c20:	7f3b      	ldrb	r3, [r7, #28]
 8000c22:	2b10      	cmp	r3, #16
 8000c24:	d901      	bls.n	8000c2a <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8000c26:	2310      	movs	r3, #16
 8000c28:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	e00a      	b.n	8000c46 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	18d4      	adds	r4, r2, r3
 8000c36:	2009      	movs	r0, #9
 8000c38:	f7ff fea4 	bl	8000984 <Read_MFRC522>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	3301      	adds	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	7f3b      	ldrb	r3, [r7, #28]
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3f0      	bcc.n	8000c30 <MFRC522_ToCard+0x164>
 8000c4e:	e001      	b.n	8000c54 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8000c50:	2302      	movs	r3, #2
 8000c52:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8000c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	@ 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd90      	pop	{r4, r7, pc}

08000c5e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af02      	add	r7, sp, #8
 8000c64:	4603      	mov	r3, r0
 8000c66:	6039      	str	r1, [r7, #0]
 8000c68:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	200d      	movs	r0, #13
 8000c6e:	f7ff fe63 	bl	8000938 <Write_MFRC522>

	TagType[0] = reqMode;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2201      	movs	r2, #1
 8000c82:	6839      	ldr	r1, [r7, #0]
 8000c84:	200c      	movs	r0, #12
 8000c86:	f7ff ff21 	bl	8000acc <MFRC522_ToCard>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <MFRC522_Request+0x3c>
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b10      	cmp	r3, #16
 8000c98:	d001      	beq.n	8000c9e <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200d      	movs	r0, #13
 8000cb8:	f7ff fe3e 	bl	8000938 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2293      	movs	r2, #147	@ 0x93
 8000cc0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	200c      	movs	r0, #12
 8000cd8:	f7ff fef8 	bl	8000acc <MFRC522_ToCard>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d118      	bne.n	8000d18 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	73bb      	strb	r3, [r7, #14]
 8000cea:	e009      	b.n	8000d00 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	7b7b      	ldrb	r3, [r7, #13]
 8000cf6:	4053      	eors	r3, r2
 8000cf8:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	73bb      	strb	r3, [r7, #14]
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d9f2      	bls.n	8000cec <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8000d06:	7bbb      	ldrb	r3, [r7, #14]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	7b7a      	ldrb	r2, [r7, #13]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d001      	beq.n	8000d18 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8000d14:	2302      	movs	r3, #2
 8000d16:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <CheckRFID>:

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
}

uint8_t CheckRFID()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	static uint32_t prevTime = 0xFFFFFFFF;

	if (prevTime == 0xFFFFFFFF)
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e28 <CheckRFID+0x104>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d104      	bne.n	8000d3e <CheckRFID+0x1a>
		prevTime = HAL_GetTick();
 8000d34:	f001 fa5e 	bl	80021f4 <HAL_GetTick>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e28 <CheckRFID+0x104>)
 8000d3c:	6013      	str	r3, [r2, #0]
	uint32_t curTime = HAL_GetTick();
 8000d3e:	f001 fa59 	bl	80021f4 <HAL_GetTick>
 8000d42:	6078      	str	r0, [r7, #4]

	if (curTime - prevTime > ckTime)
 8000d44:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <CheckRFID+0x104>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	4b37      	ldr	r3, [pc, #220]	@ (8000e2c <CheckRFID+0x108>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d962      	bls.n	8000e1a <CheckRFID+0xf6>
	{
		status = MFRC522_Request(PICC_REQIDL, str);
 8000d54:	4936      	ldr	r1, [pc, #216]	@ (8000e30 <CheckRFID+0x10c>)
 8000d56:	2026      	movs	r0, #38	@ 0x26
 8000d58:	f7ff ff81 	bl	8000c5e <MFRC522_Request>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b34      	ldr	r3, [pc, #208]	@ (8000e34 <CheckRFID+0x110>)
 8000d62:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);
 8000d64:	4832      	ldr	r0, [pc, #200]	@ (8000e30 <CheckRFID+0x10c>)
 8000d66:	f7ff ff9f 	bl	8000ca8 <MFRC522_Anticoll>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b31      	ldr	r3, [pc, #196]	@ (8000e34 <CheckRFID+0x110>)
 8000d70:	701a      	strb	r2, [r3, #0]
		memcpy(sNum, str, 5);
 8000d72:	4b31      	ldr	r3, [pc, #196]	@ (8000e38 <CheckRFID+0x114>)
 8000d74:	4a2e      	ldr	r2, [pc, #184]	@ (8000e30 <CheckRFID+0x10c>)
 8000d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d7a:	6018      	str	r0, [r3, #0]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	7019      	strb	r1, [r3, #0]
		if((sNum[0]==195) && (sNum[1]==159) && (sNum[2]==70) && (sNum[3]==150) && (sNum[4]==140) )
 8000d80:	4b2d      	ldr	r3, [pc, #180]	@ (8000e38 <CheckRFID+0x114>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2bc3      	cmp	r3, #195	@ 0xc3
 8000d86:	d11c      	bne.n	8000dc2 <CheckRFID+0x9e>
 8000d88:	4b2b      	ldr	r3, [pc, #172]	@ (8000e38 <CheckRFID+0x114>)
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	2b9f      	cmp	r3, #159	@ 0x9f
 8000d8e:	d118      	bne.n	8000dc2 <CheckRFID+0x9e>
 8000d90:	4b29      	ldr	r3, [pc, #164]	@ (8000e38 <CheckRFID+0x114>)
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	2b46      	cmp	r3, #70	@ 0x46
 8000d96:	d114      	bne.n	8000dc2 <CheckRFID+0x9e>
 8000d98:	4b27      	ldr	r3, [pc, #156]	@ (8000e38 <CheckRFID+0x114>)
 8000d9a:	78db      	ldrb	r3, [r3, #3]
 8000d9c:	2b96      	cmp	r3, #150	@ 0x96
 8000d9e:	d110      	bne.n	8000dc2 <CheckRFID+0x9e>
 8000da0:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <CheckRFID+0x114>)
 8000da2:	791b      	ldrb	r3, [r3, #4]
 8000da4:	2b8c      	cmp	r3, #140	@ 0x8c
 8000da6:	d10c      	bne.n	8000dc2 <CheckRFID+0x9e>
		{
			ret = 1;
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <CheckRFID+0x118>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
			ckTime = ResponseTime;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <CheckRFID+0x108>)
 8000db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db4:	601a      	str	r2, [r3, #0]
//			printf("%s \r\n", MSG1);
			prevTime = HAL_GetTick();
 8000db6:	f001 fa1d 	bl	80021f4 <HAL_GetTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e28 <CheckRFID+0x104>)
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e02b      	b.n	8000e1a <CheckRFID+0xf6>
		}
		else if((sNum[0]==18) && (sNum[1]==35) && (sNum[2]==141) && (sNum[3]==83) && (sNum[4]==239) )
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <CheckRFID+0x114>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b12      	cmp	r3, #18
 8000dc8:	d11c      	bne.n	8000e04 <CheckRFID+0xe0>
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <CheckRFID+0x114>)
 8000dcc:	785b      	ldrb	r3, [r3, #1]
 8000dce:	2b23      	cmp	r3, #35	@ 0x23
 8000dd0:	d118      	bne.n	8000e04 <CheckRFID+0xe0>
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <CheckRFID+0x114>)
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	2b8d      	cmp	r3, #141	@ 0x8d
 8000dd8:	d114      	bne.n	8000e04 <CheckRFID+0xe0>
 8000dda:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <CheckRFID+0x114>)
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	2b53      	cmp	r3, #83	@ 0x53
 8000de0:	d110      	bne.n	8000e04 <CheckRFID+0xe0>
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <CheckRFID+0x114>)
 8000de4:	791b      	ldrb	r3, [r3, #4]
 8000de6:	2bef      	cmp	r3, #239	@ 0xef
 8000de8:	d10c      	bne.n	8000e04 <CheckRFID+0xe0>
		{
			ret = 1;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <CheckRFID+0x118>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	701a      	strb	r2, [r3, #0]
			ckTime = ResponseTime;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <CheckRFID+0x108>)
 8000df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000df6:	601a      	str	r2, [r3, #0]
//			printf("%s \r\n", MSG2);
			prevTime = HAL_GetTick();
 8000df8:	f001 f9fc 	bl	80021f4 <HAL_GetTick>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <CheckRFID+0x104>)
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e00a      	b.n	8000e1a <CheckRFID+0xf6>
		}
		else
		{
			ret = 0;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <CheckRFID+0x118>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
			ckTime = RequestTime;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <CheckRFID+0x108>)
 8000e0c:	22c8      	movs	r2, #200	@ 0xc8
 8000e0e:	601a      	str	r2, [r3, #0]
//			printf("%s \r\n", MSG3);
			prevTime = HAL_GetTick();
 8000e10:	f001 f9f0 	bl	80021f4 <HAL_GetTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <CheckRFID+0x104>)
 8000e18:	6013      	str	r3, [r2, #0]
		}
	}
	return ret;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <CheckRFID+0x118>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000040 	.word	0x20000040
 8000e2c:	2000003c 	.word	0x2000003c
 8000e30:	200000f4 	.word	0x200000f4
 8000e34:	200000f0 	.word	0x200000f0
 8000e38:	20000104 	.word	0x20000104
 8000e3c:	20000109 	.word	0x20000109

08000e40 <LED_ON>:
  		{R_Port, R_Pin, SET, RESET},
  		{G_Port, G_Pin, SET, RESET},
  		{B_Port, B_Pin, SET, RESET}
  };

void LED_ON(uint8_t num){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(rgb[num].port, rgb[num].pin, rgb[num].onState);
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <LED_ON+0x34>)
 8000e4e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <LED_ON+0x34>)
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	4413      	add	r3, r2
 8000e5a:	8899      	ldrh	r1, [r3, #4]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <LED_ON+0x34>)
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4413      	add	r3, r2
 8000e64:	799b      	ldrb	r3, [r3, #6]
 8000e66:	461a      	mov	r2, r3
 8000e68:	f001 fca2 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000044 	.word	0x20000044

08000e78 <LED_OFF>:

void LED_OFF(uint8_t num){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(rgb[num].port, rgb[num].pin, rgb[num].offState);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <LED_OFF+0x34>)
 8000e86:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <LED_OFF+0x34>)
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	4413      	add	r3, r2
 8000e92:	8899      	ldrh	r1, [r3, #4]
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4a05      	ldr	r2, [pc, #20]	@ (8000eac <LED_OFF+0x34>)
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	79db      	ldrb	r3, [r3, #7]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f001 fc86 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000044 	.word	0x20000044

08000eb0 <LED_R_ON>:
void LED_TOGGLE(uint8_t num){
	HAL_GPIO_TogglePin(rgb[num].port, rgb[num].pin);
}

void LED_R_ON()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	LED_ON(0);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff ffc3 	bl	8000e40 <LED_ON>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <LED_G_ON>:

void LED_G_ON()
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
	LED_ON(1);
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f7ff ffbc 	bl	8000e40 <LED_ON>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <LED_R_OFF>:
{
	LED_ON(2);
}

void LED_R_OFF()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	LED_OFF(0);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff ffd1 	bl	8000e78 <LED_OFF>
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <LED_G_OFF>:

void LED_G_OFF()
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
	LED_OFF(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff ffca 	bl	8000e78 <LED_OFF>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <servoInit>:

static volatile uint8_t state = 0;
static volatile uint16_t lastAngle = 0;

void servoInit()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <servoInit+0x10>)
 8000ef0:	f003 fa0e 	bl	8004310 <HAL_TIM_PWM_Start>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000258 	.word	0x20000258

08000efc <angleCheck>:

bool angleCheck()
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	if(lastAngle == 127 || lastAngle == 80) return true;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <angleCheck+0x28>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f08:	d004      	beq.n	8000f14 <angleCheck+0x18>
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <angleCheck+0x28>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	2b50      	cmp	r3, #80	@ 0x50
 8000f12:	d101      	bne.n	8000f18 <angleCheck+0x1c>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <angleCheck+0x1e>
	return false;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2000010c 	.word	0x2000010c

08000f28 <OpenDoor>:

void OpenDoor()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
	uint16_t angle = angleCheck() ? 80 : lastAngle ;
 8000f2e:	f7ff ffe5 	bl	8000efc <angleCheck>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <OpenDoor+0x18>
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <OpenDoor+0x4c>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	e000      	b.n	8000f42 <OpenDoor+0x1a>
 8000f40:	2350      	movs	r3, #80	@ 0x50
 8000f42:	80fb      	strh	r3, [r7, #6]

	for(; angle<=127; angle++)
 8000f44:	e00b      	b.n	8000f5e <OpenDoor+0x36>
	{
		Servo_Pin->CCR1 = angle;
 8000f46:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <OpenDoor+0x50>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	6353      	str	r3, [r2, #52]	@ 0x34
		lastAngle = angle;
 8000f4c:	4a09      	ldr	r2, [pc, #36]	@ (8000f74 <OpenDoor+0x4c>)
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	8013      	strh	r3, [r2, #0]
		HAL_Delay(50);
 8000f52:	2032      	movs	r0, #50	@ 0x32
 8000f54:	f001 f95a 	bl	800220c <HAL_Delay>
	for(; angle<=127; angle++)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	80fb      	strh	r3, [r7, #6]
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f62:	d9f0      	bls.n	8000f46 <OpenDoor+0x1e>
	}
	state = 1;
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <OpenDoor+0x54>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000010c 	.word	0x2000010c
 8000f78:	40000c00 	.word	0x40000c00
 8000f7c:	2000010a 	.word	0x2000010a

08000f80 <CloseDoor>:

void CloseDoor()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint16_t angle = angleCheck() ? 127 : lastAngle ;
 8000f86:	f7ff ffb9 	bl	8000efc <angleCheck>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <CloseDoor+0x18>
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <CloseDoor+0x4c>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	e000      	b.n	8000f9a <CloseDoor+0x1a>
 8000f98:	237f      	movs	r3, #127	@ 0x7f
 8000f9a:	80fb      	strh	r3, [r7, #6]

	for(; angle>=80; angle--)
 8000f9c:	e00b      	b.n	8000fb6 <CloseDoor+0x36>
	{
		Servo_Pin->CCR1 = angle;
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd0 <CloseDoor+0x50>)
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	6353      	str	r3, [r2, #52]	@ 0x34
		lastAngle = angle;
 8000fa4:	4a09      	ldr	r2, [pc, #36]	@ (8000fcc <CloseDoor+0x4c>)
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	8013      	strh	r3, [r2, #0]
		HAL_Delay(50);
 8000faa:	2032      	movs	r0, #50	@ 0x32
 8000fac:	f001 f92e 	bl	800220c <HAL_Delay>
	for(; angle>=80; angle--)
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	80fb      	strh	r3, [r7, #6]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	2b4f      	cmp	r3, #79	@ 0x4f
 8000fba:	d8f0      	bhi.n	8000f9e <CloseDoor+0x1e>
	}
	state = 0;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <CloseDoor+0x54>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000010c 	.word	0x2000010c
 8000fd0:	40000c00 	.word	0x40000c00
 8000fd4:	2000010a 	.word	0x2000010a

08000fd8 <GetStateDoor>:
	HAL_Delay(2000);
	CloseDoor();
}

uint8_t GetStateDoor()
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	return state;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <GetStateDoor+0x14>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	2000010a 	.word	0x2000010a

08000ff0 <stepperInit>:

// 모터 상태 변수 (모터가 작동 중인지 여부를 나타냄)
static volatile uint8_t motorRunning = 0; // 0: 멈춤, 1: 작동

void stepperInit(TIM_HandleTypeDef *htim, uint8_t speedLevel)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	tim = htim;
 8000ffc:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <stepperInit+0x24>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
	stepperSpeed(speedLevel);
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f8a5 	bl	8001154 <stepperSpeed>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000110 	.word	0x20000110

08001018 <stepMotor>:

// 모터 1스텝 회전 함수
void stepMotor(uint8_t step) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(IN1_Port, IN1_Pin, HALF_STEP_SEQ[step][0]);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <stepMotor+0x60>)
 8001026:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 800102a:	461a      	mov	r2, r3
 800102c:	2101      	movs	r1, #1
 800102e:	4813      	ldr	r0, [pc, #76]	@ (800107c <stepMotor+0x64>)
 8001030:	f001 fbbe 	bl	80027b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_Port, IN2_Pin, HALF_STEP_SEQ[step][1]);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <stepMotor+0x60>)
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	461a      	mov	r2, r3
 8001040:	2102      	movs	r1, #2
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <stepMotor+0x64>)
 8001044:	f001 fbb4 	bl	80027b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_Port, IN3_Pin, HALF_STEP_SEQ[step][2]);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <stepMotor+0x60>)
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	461a      	mov	r2, r3
 8001054:	2104      	movs	r1, #4
 8001056:	4809      	ldr	r0, [pc, #36]	@ (800107c <stepMotor+0x64>)
 8001058:	f001 fbaa 	bl	80027b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_Port, IN4_Pin, HALF_STEP_SEQ[step][3]);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a06      	ldr	r2, [pc, #24]	@ (8001078 <stepMotor+0x60>)
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	78db      	ldrb	r3, [r3, #3]
 8001066:	461a      	mov	r2, r3
 8001068:	2108      	movs	r1, #8
 800106a:	4804      	ldr	r0, [pc, #16]	@ (800107c <stepMotor+0x64>)
 800106c:	f001 fba0 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	08006c08 	.word	0x08006c08
 800107c:	40020800 	.word	0x40020800

08001080 <HAL_TIM_PeriodElapsedCallback>:
//    uint16_t steps = (uint16_t)((uint32_t)(degrees * STEPS_PER_REVOLUTION) / 360);
//    rotateSteps(steps, direction);  // 지정된 방향으로 회전
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	printf("into callback \r\n");
 8001088:	482a      	ldr	r0, [pc, #168]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800108a:	f004 fd23 	bl	8005ad4 <puts>
    if (htim->Instance == Stepper_Pin) // TIM10 인터럽트 확인
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d148      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0xaa>
    {
        if (remainingSteps > 0)
 8001098:	4b28      	ldr	r3, [pc, #160]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	b29b      	uxth	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d035      	beq.n	800110e <HAL_TIM_PeriodElapsedCallback+0x8e>
        {
            // 방향에 따라 스텝 계산
            if (motorDirection == DIR_CW)
 80010a2:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d10e      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x4a>
            {
                currentStep = (currentStep + 1) % 8; // 시계 방향
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	425a      	negs	r2, r3
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	f002 0207 	and.w	r2, r2, #7
 80010be:	bf58      	it	pl
 80010c0:	4253      	negpl	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	e00d      	b.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x66>
            }
            else
            {
                currentStep = (currentStep == 0) ? 7 : currentStep - 1; // 반시계 방향
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_TIM_PeriodElapsedCallback+0x60>
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3b01      	subs	r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e000      	b.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x62>
 80010e0:	2307      	movs	r3, #7
 80010e2:	4a18      	ldr	r2, [pc, #96]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010e4:	7013      	strb	r3, [r2, #0]
            }

            // 모터 스텝 출력
            stepMotor(currentStep);
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff93 	bl	8001018 <stepMotor>
//            HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, HALF_STEP_SEQ[currentStep][1]);
//            HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, HALF_STEP_SEQ[currentStep][2]);
//            HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, HALF_STEP_SEQ[currentStep][3]);

            // 남은 스텝 감소
            remainingSteps--;
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010fe:	801a      	strh	r2, [r3, #0]
            printf("%d \r\n", remainingSteps);
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	b29b      	uxth	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	480f      	ldr	r0, [pc, #60]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800110a:	f004 fc7b 	bl	8005a04 <iprintf>
        }
        if(remainingSteps <= 0)
 800110e:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d108      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0xaa>
        {
        	printf("motor stop \r\n");
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800111a:	f004 fcdb 	bl	8005ad4 <puts>
            // 회전 완료되었으면 타이머 정지
        	motorRunning = 0;
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop_IT(htim);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f003 f86b 	bl	8004200 <HAL_TIM_Base_Stop_IT>
        }
    }
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	08006b70 	.word	0x08006b70
 8001138:	40014400 	.word	0x40014400
 800113c:	20000116 	.word	0x20000116
 8001140:	2000005c 	.word	0x2000005c
 8001144:	20000114 	.word	0x20000114
 8001148:	08006b80 	.word	0x08006b80
 800114c:	08006b88 	.word	0x08006b88
 8001150:	20000118 	.word	0x20000118

08001154 <stepperSpeed>:

// 속도 설정 (타이머 주파수 조정)
void stepperSpeed(uint8_t speedLevel)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
    if (tim->Instance == Stepper_Pin)
 800115e:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <stepperSpeed+0x58>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <stepperSpeed+0x5c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d11b      	bne.n	80011a2 <stepperSpeed+0x4e>
    {
        if (speedLevel >= SPEED_TABLE_SIZE) return;
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d817      	bhi.n	80011a0 <stepperSpeed+0x4c>

        uint16_t frequency = speedTable[speedLevel]; // 속도 선택
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <stepperSpeed+0x60>)
 8001174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001178:	81fb      	strh	r3, [r7, #14]
        uint16_t arr = (1000000 / frequency) - 1;    // ARR 계산 (PSC = 99 고정)
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <stepperSpeed+0x64>)
 800117e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	81bb      	strh	r3, [r7, #12]
        Stepper_Pin->PSC = 100-1;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <stepperSpeed+0x5c>)
 800118a:	2263      	movs	r2, #99	@ 0x63
 800118c:	629a      	str	r2, [r3, #40]	@ 0x28
        Stepper_Pin->ARR = arr;                  // ARR 설정
 800118e:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <stepperSpeed+0x5c>)
 8001190:	89bb      	ldrh	r3, [r7, #12]
 8001192:	62d3      	str	r3, [r2, #44]	@ 0x2c
        __HAL_TIM_SET_COUNTER(tim, 0);             // 타이머 초기화
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <stepperSpeed+0x58>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
 800119e:	e000      	b.n	80011a2 <stepperSpeed+0x4e>
        if (speedLevel >= SPEED_TABLE_SIZE) return;
 80011a0:	bf00      	nop
    }
}
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000110 	.word	0x20000110
 80011b0:	40014400 	.word	0x40014400
 80011b4:	08006bfc 	.word	0x08006bfc
 80011b8:	000f4240 	.word	0x000f4240

080011bc <setMotorDirection>:

// 방향 설정 (시계방향 또는 반시계방향)
void setMotorDirection(uint8_t direction)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    motorDirection = direction;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <setMotorDirection+0x1c>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	7013      	strb	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	2000005c 	.word	0x2000005c

080011dc <rotateDegrees>:

void rotateDegrees(uint16_t degrees)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
    // 1도 당 몇 스텝인지 계산 (28BYJ-48의 경우 4096 스텝으로 360도 회전)
    uint16_t steps = (uint16_t)((uint32_t)degrees * DRIVE_RESOLUTION / 360);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	031b      	lsls	r3, r3, #12
 80011ea:	08db      	lsrs	r3, r3, #3
 80011ec:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <rotateDegrees+0x38>)
 80011ee:	fba2 2303 	umull	r2, r3, r2, r3
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	81fb      	strh	r3, [r7, #14]

    // 남은 스텝 수를 초기화
    remainingSteps = steps;
 80011f6:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <rotateDegrees+0x3c>)
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	8013      	strh	r3, [r2, #0]

    // 모터 스테이트 전환
    motorRunning = 1;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <rotateDegrees+0x40>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]

    // 타이머 인터럽트 시작
    HAL_TIM_Base_Start_IT(tim); // 타이머 인터럽트 시작
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <rotateDegrees+0x44>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f002 ff98 	bl	800413c <HAL_TIM_Base_Start_IT>
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	16c16c17 	.word	0x16c16c17
 8001218:	20000116 	.word	0x20000116
 800121c:	20000118 	.word	0x20000118
 8001220:	20000110 	.word	0x20000110

08001224 <GetStateStep>:

uint8_t GetStateStep()
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	return motorRunning;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <GetStateStep+0x14>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b2db      	uxtb	r3, r3
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000118 	.word	0x20000118

0800123c <StopMotor>:

void StopMotor()
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	remainingSteps = 5;
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <StopMotor+0x14>)
 8001242:	2205      	movs	r2, #5
 8001244:	801a      	strh	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	20000116 	.word	0x20000116

08001254 <apInit>:
char msg[16] = "";

extern uint32_t ckTime;

void apInit()
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	hwInit();
 8001258:	f000 f996 	bl	8001588 <hwInit>

//	setMotorDirection(DIR_CCW);
//	targetFloor = 1;
//	rotateDegrees(1800);
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <apMain>:


void apMain()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	lcd_command(CLEAR_DISPLAY);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fa88 	bl	800077c <lcd_command>
	HAL_Delay(2);
 800126c:	2002      	movs	r0, #2
 800126e:	f000 ffcd 	bl	800220c <HAL_Delay>
	while(1)
	{
		LED_Switch();
 8001272:	f000 f945 	bl	8001500 <LED_Switch>
		IDflag = CheckRFID();
 8001276:	f7ff fd55 	bl	8000d24 <CheckRFID>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b67      	ldr	r3, [pc, #412]	@ (800141c <apMain+0x1bc>)
 8001280:	701a      	strb	r2, [r3, #0]
		strcpy(msg, MSG[IDflag]);
 8001282:	4b66      	ldr	r3, [pc, #408]	@ (800141c <apMain+0x1bc>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b65      	ldr	r3, [pc, #404]	@ (8001420 <apMain+0x1c0>)
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	4619      	mov	r1, r3
 8001290:	4864      	ldr	r0, [pc, #400]	@ (8001424 <apMain+0x1c4>)
 8001292:	f004 fd9a 	bl	8005dca <strcpy>

		if(strcmp(msg, prevStr) != 0)
 8001296:	4964      	ldr	r1, [pc, #400]	@ (8001428 <apMain+0x1c8>)
 8001298:	4862      	ldr	r0, [pc, #392]	@ (8001424 <apMain+0x1c4>)
 800129a:	f7fe ffa1 	bl	80001e0 <strcmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d014      	beq.n	80012ce <apMain+0x6e>
		{
			strcpy(prevStr, msg);
 80012a4:	495f      	ldr	r1, [pc, #380]	@ (8001424 <apMain+0x1c4>)
 80012a6:	4860      	ldr	r0, [pc, #384]	@ (8001428 <apMain+0x1c8>)
 80012a8:	f004 fd8f 	bl	8005dca <strcpy>
			printf("%s \r\n", prevStr);
 80012ac:	495e      	ldr	r1, [pc, #376]	@ (8001428 <apMain+0x1c8>)
 80012ae:	485f      	ldr	r0, [pc, #380]	@ (800142c <apMain+0x1cc>)
 80012b0:	f004 fba8 	bl	8005a04 <iprintf>
			lcd_command(CLEAR_DISPLAY);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fa61 	bl	800077c <lcd_command>
			HAL_Delay(2);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 ffa6 	bl	800220c <HAL_Delay>
			move_cursor(0, 0);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fb02 	bl	80008cc <move_cursor>
			lcd_string(prevStr);
 80012c8:	4857      	ldr	r0, [pc, #348]	@ (8001428 <apMain+0x1c8>)
 80012ca:	f7ff faea 	bl	80008a2 <lcd_string>
		}

		if(IRflag == 1)
 80012ce:	4b58      	ldr	r3, [pc, #352]	@ (8001430 <apMain+0x1d0>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d108      	bne.n	80012e8 <apMain+0x88>
		{
			IRflag = 0;
 80012d6:	4b56      	ldr	r3, [pc, #344]	@ (8001430 <apMain+0x1d0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
			OpenDoor();
 80012dc:	f7ff fe24 	bl	8000f28 <OpenDoor>
			HAL_Delay(2000);
 80012e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012e4:	f000 ff92 	bl	800220c <HAL_Delay>
//		if(currFloor == prevFloor)
//		{
//			LCD_Write_Floor();
//		}

		if(IDflag != 0)
 80012e8:	4b4c      	ldr	r3, [pc, #304]	@ (800141c <apMain+0x1bc>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0c0      	beq.n	8001272 <apMain+0x12>
		{

			uint8_t btn = GetPressedButton();
 80012f0:	f7ff f9d2 	bl	8000698 <GetPressedButton>
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
			BtnFlag = Button(btn);
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f8b2 	bl	8001464 <Button>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	4b4b      	ldr	r3, [pc, #300]	@ (8001434 <apMain+0x1d4>)
 8001306:	701a      	strb	r2, [r3, #0]

			if(BtnFlag)
 8001308:	4b4a      	ldr	r3, [pc, #296]	@ (8001434 <apMain+0x1d4>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <apMain+0xbc>
			{
				lcd_command(CLEAR_DISPLAY);
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff fa33 	bl	800077c <lcd_command>
				HAL_Delay(2);
 8001316:	2002      	movs	r0, #2
 8001318:	f000 ff78 	bl	800220c <HAL_Delay>
			}
			if(GetStateStep() == 0 && BtnFlag == 0)
 800131c:	f7ff ff82 	bl	8001224 <GetStateStep>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10b      	bne.n	800133e <apMain+0xde>
 8001326:	4b43      	ldr	r3, [pc, #268]	@ (8001434 <apMain+0x1d4>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <apMain+0xde>
			{
				move_cursor(1, 0);
 800132e:	2100      	movs	r1, #0
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff facb 	bl	80008cc <move_cursor>
				lcd_string("What floor");
 8001336:	4840      	ldr	r0, [pc, #256]	@ (8001438 <apMain+0x1d8>)
 8001338:	f7ff fab3 	bl	80008a2 <lcd_string>
 800133c:	e06c      	b.n	8001418 <apMain+0x1b8>
			}
			else
			{
				if(targetFloor != currFloor)
 800133e:	4b3f      	ldr	r3, [pc, #252]	@ (800143c <apMain+0x1dc>)
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <apMain+0x1e0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d093      	beq.n	8001272 <apMain+0x12>
				{
					ckTime = RequestTime;
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <apMain+0x1e4>)
 800134c:	22c8      	movs	r2, #200	@ 0xc8
 800134e:	601a      	str	r2, [r3, #0]
					prevFloor = currFloor;
 8001350:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <apMain+0x1e0>)
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	4b3c      	ldr	r3, [pc, #240]	@ (8001448 <apMain+0x1e8>)
 8001356:	701a      	strb	r2, [r3, #0]
					// UP or Down
					int8_t distance = targetFloor - currFloor;
 8001358:	4b38      	ldr	r3, [pc, #224]	@ (800143c <apMain+0x1dc>)
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <apMain+0x1e0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	b2db      	uxtb	r3, r3
 8001364:	71bb      	strb	r3, [r7, #6]
					uint8_t dir = distance > 0 ? DIR_CW : DIR_CCW;
 8001366:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfd4      	ite	le
 800136e:	2301      	movle	r3, #1
 8001370:	2300      	movgt	r3, #0
 8001372:	b2db      	uxtb	r3, r3
 8001374:	717b      	strb	r3, [r7, #5]
					setMotorDirection(dir);
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff1f 	bl	80011bc <setMotorDirection>
					lcd_command(CLEAR_DISPLAY);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff f9fc 	bl	800077c <lcd_command>
					HAL_Delay(2);
 8001384:	2002      	movs	r0, #2
 8001386:	f000 ff41 	bl	800220c <HAL_Delay>
					sprintf(lcdTarget, "TF : %d  %s", targetFloor, dir ? "DOWN" : "UP");
 800138a:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <apMain+0x1dc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	797b      	ldrb	r3, [r7, #5]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <apMain+0x13a>
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <apMain+0x1ec>)
 8001398:	e000      	b.n	800139c <apMain+0x13c>
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <apMain+0x1f0>)
 800139c:	492d      	ldr	r1, [pc, #180]	@ (8001454 <apMain+0x1f4>)
 800139e:	482e      	ldr	r0, [pc, #184]	@ (8001458 <apMain+0x1f8>)
 80013a0:	f004 fba0 	bl	8005ae4 <siprintf>
					sprintf(lcdCurrent, "CF : %d", currFloor);
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <apMain+0x1e0>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	492c      	ldr	r1, [pc, #176]	@ (800145c <apMain+0x1fc>)
 80013ac:	482c      	ldr	r0, [pc, #176]	@ (8001460 <apMain+0x200>)
 80013ae:	f004 fb99 	bl	8005ae4 <siprintf>
					move_cursor(0, 0);
 80013b2:	2100      	movs	r1, #0
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff fa89 	bl	80008cc <move_cursor>
					lcd_string(lcdTarget);
 80013ba:	4827      	ldr	r0, [pc, #156]	@ (8001458 <apMain+0x1f8>)
 80013bc:	f7ff fa71 	bl	80008a2 <lcd_string>
					move_cursor(1, 0);
 80013c0:	2100      	movs	r1, #0
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff fa82 	bl	80008cc <move_cursor>
					lcd_string(lcdCurrent);
 80013c8:	4825      	ldr	r0, [pc, #148]	@ (8001460 <apMain+0x200>)
 80013ca:	f7ff fa6a 	bl	80008a2 <lcd_string>
					while(1)
					{
						rotateDegrees(100);
 80013ce:	2064      	movs	r0, #100	@ 0x64
 80013d0:	f7ff ff04 	bl	80011dc <rotateDegrees>
						if(prevFloor != currFloor)
 80013d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <apMain+0x1e8>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <apMain+0x1e0>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d011      	beq.n	8001404 <apMain+0x1a4>
						{
							prevFloor = currFloor;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <apMain+0x1e0>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <apMain+0x1e8>)
 80013e6:	701a      	strb	r2, [r3, #0]
							sprintf(lcdCurrent, "CF : %d", currFloor);
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <apMain+0x1e0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	491b      	ldr	r1, [pc, #108]	@ (800145c <apMain+0x1fc>)
 80013f0:	481b      	ldr	r0, [pc, #108]	@ (8001460 <apMain+0x200>)
 80013f2:	f004 fb77 	bl	8005ae4 <siprintf>
							move_cursor(1, 0);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fa67 	bl	80008cc <move_cursor>
							lcd_string(lcdCurrent);
 80013fe:	4818      	ldr	r0, [pc, #96]	@ (8001460 <apMain+0x200>)
 8001400:	f7ff fa4f 	bl	80008a2 <lcd_string>
						}
						if(targetFloor == currFloor)
 8001404:	4b0d      	ldr	r3, [pc, #52]	@ (800143c <apMain+0x1dc>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <apMain+0x1e0>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d000      	beq.n	8001412 <apMain+0x1b2>
						rotateDegrees(100);
 8001410:	e7dd      	b.n	80013ce <apMain+0x16e>
						{
							break;
 8001412:	bf00      	nop
						}
					}
					CallBuzzer();
 8001414:	f7ff f97c 	bl	8000710 <CallBuzzer>
		LED_Switch();
 8001418:	e72b      	b.n	8001272 <apMain+0x12>
 800141a:	bf00      	nop
 800141c:	2000011d 	.word	0x2000011d
 8001420:	20000060 	.word	0x20000060
 8001424:	20000150 	.word	0x20000150
 8001428:	20000120 	.word	0x20000120
 800142c:	08006bc4 	.word	0x08006bc4
 8001430:	2000011e 	.word	0x2000011e
 8001434:	2000011f 	.word	0x2000011f
 8001438:	08006bcc 	.word	0x08006bcc
 800143c:	2000011b 	.word	0x2000011b
 8001440:	2000011a 	.word	0x2000011a
 8001444:	2000003c 	.word	0x2000003c
 8001448:	20000119 	.word	0x20000119
 800144c:	08006bd8 	.word	0x08006bd8
 8001450:	08006be0 	.word	0x08006be0
 8001454:	08006be4 	.word	0x08006be4
 8001458:	20000130 	.word	0x20000130
 800145c:	08006bf0 	.word	0x08006bf0
 8001460:	20000140 	.word	0x20000140

08001464 <Button>:
		}
	}
}

uint8_t Button(uint8_t btn)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	if(btn != 0)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <Button+0x58>
	{
		if(btn == 4)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	2b04      	cmp	r3, #4
 8001478:	d107      	bne.n	800148a <Button+0x26>
		{
			if(!GetStateStep())
 800147a:	f7ff fed3 	bl	8001224 <GetStateStep>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d119      	bne.n	80014b8 <Button+0x54>
			{
				OpenDoor();
 8001484:	f7ff fd50 	bl	8000f28 <OpenDoor>
 8001488:	e016      	b.n	80014b8 <Button+0x54>
			}
		}
		else if(btn == 5)
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10c      	bne.n	80014aa <Button+0x46>
		{
			if(!GetStateStep() && GetStateDoor() == OPENED)
 8001490:	f7ff fec8 	bl	8001224 <GetStateStep>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10e      	bne.n	80014b8 <Button+0x54>
 800149a:	f7ff fd9d 	bl	8000fd8 <GetStateDoor>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d109      	bne.n	80014b8 <Button+0x54>
			{
				CloseDoor();
 80014a4:	f7ff fd6c 	bl	8000f80 <CloseDoor>
 80014a8:	e006      	b.n	80014b8 <Button+0x54>
			}
		}
		else
		{
			if(cnt < 4)
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <Button+0x64>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d802      	bhi.n	80014b8 <Button+0x54>
			{
				targetFloor = btn;
 80014b2:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <Button+0x68>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	7013      	strb	r3, [r2, #0]
			}
		}
		return 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <Button+0x5a>
	}
	return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000011c 	.word	0x2000011c
 80014cc:	2000011b 	.word	0x2000011b

080014d0 <FloorCheck>:

void FloorCheck()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	if(prevFloor != currFloor)
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <FloorCheck+0x24>)
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <FloorCheck+0x28>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d007      	beq.n	80014f0 <FloorCheck+0x20>
	{
		if(targetFloor == currFloor)
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <FloorCheck+0x2c>)
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <FloorCheck+0x28>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d101      	bne.n	80014f0 <FloorCheck+0x20>
		{
			StopMotor();
 80014ec:	f7ff fea6 	bl	800123c <StopMotor>
		}
	}
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000119 	.word	0x20000119
 80014f8:	2000011a 	.word	0x2000011a
 80014fc:	2000011b 	.word	0x2000011b

08001500 <LED_Switch>:

void LED_Switch()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	if(GetStateStep())
 8001504:	f7ff fe8e 	bl	8001224 <GetStateStep>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d004      	beq.n	8001518 <LED_Switch+0x18>
	{
		LED_G_OFF();
 800150e:	f7ff fce4 	bl	8000eda <LED_G_OFF>
		LED_R_ON();
 8001512:	f7ff fccd 	bl	8000eb0 <LED_R_ON>
	else
	{
		LED_R_OFF();
		LED_G_ON();
	}
}
 8001516:	e003      	b.n	8001520 <LED_Switch+0x20>
		LED_R_OFF();
 8001518:	f7ff fcd8 	bl	8000ecc <LED_R_OFF>
		LED_G_ON();
 800151c:	f7ff fccf 	bl	8000ebe <LED_G_ON>
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == PHOTO_INT1_Pin)
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001534:	d105      	bne.n	8001542 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		currFloor = 1;
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
		FloorCheck();
 800153c:	f7ff ffc8 	bl	80014d0 <FloorCheck>
	}
	else if(GPIO_Pin == IR_Pin)
	{
		IRflag = 1;
	}
}
 8001540:	e01a      	b.n	8001578 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == PHOTO_INT2_Pin)
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001548:	d105      	bne.n	8001556 <HAL_GPIO_EXTI_Callback+0x32>
		currFloor = 2;
 800154a:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <HAL_GPIO_EXTI_Callback+0x5c>)
 800154c:	2202      	movs	r2, #2
 800154e:	701a      	strb	r2, [r3, #0]
		FloorCheck();
 8001550:	f7ff ffbe 	bl	80014d0 <FloorCheck>
}
 8001554:	e010      	b.n	8001578 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == PHOTO_INT3_Pin)
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800155c:	d105      	bne.n	800156a <HAL_GPIO_EXTI_Callback+0x46>
		currFloor = 3;
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001560:	2203      	movs	r2, #3
 8001562:	701a      	strb	r2, [r3, #0]
		FloorCheck();
 8001564:	f7ff ffb4 	bl	80014d0 <FloorCheck>
}
 8001568:	e006      	b.n	8001578 <HAL_GPIO_EXTI_Callback+0x54>
	else if(GPIO_Pin == IR_Pin)
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001570:	d102      	bne.n	8001578 <HAL_GPIO_EXTI_Callback+0x54>
		IRflag = 1;
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <HAL_GPIO_EXTI_Callback+0x60>)
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000011a 	.word	0x2000011a
 8001584:	2000011e 	.word	0x2000011e

08001588 <hwInit>:

#include "hw.h"
#include "tim.h"

void hwInit()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	buzzerInit();
 800158c:	f7ff f8b6 	bl	80006fc <buzzerInit>
	photoInit();
 8001590:	f7ff f9b4 	bl	80008fc <photoInit>
	servoInit();
 8001594:	f7ff fca8 	bl	8000ee8 <servoInit>
	stepperInit(&htim10, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	4804      	ldr	r0, [pc, #16]	@ (80015ac <hwInit+0x24>)
 800159c:	f7ff fd28 	bl	8000ff0 <stepperInit>
	MFRC522_Init();
 80015a0:	f7ff fa66 	bl	8000a70 <MFRC522_Init>
	i2c_lcd_init();
 80015a4:	f7ff f952 	bl	800084c <i2c_lcd_init>

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200002a0 	.word	0x200002a0

080015b0 <__io_putchar>:



PUTCHAR_PROTOTYPE
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d106      	bne.n	80015cc <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80015be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015c2:	2201      	movs	r2, #1
 80015c4:	4907      	ldr	r1, [pc, #28]	@ (80015e4 <__io_putchar+0x34>)
 80015c6:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <__io_putchar+0x38>)
 80015c8:	f003 fd9e 	bl	8005108 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015d2:	2201      	movs	r2, #1
 80015d4:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <__io_putchar+0x38>)
 80015d6:	f003 fd97 	bl	8005108 <HAL_UART_Transmit>
}
 80015da:	bf00      	nop
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	08006bf8 	.word	0x08006bf8
 80015e8:	200002e8 	.word	0x200002e8

080015ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a41      	ldr	r2, [pc, #260]	@ (8001710 <MX_GPIO_Init+0x124>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b3f      	ldr	r3, [pc, #252]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b3b      	ldr	r3, [pc, #236]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a3a      	ldr	r2, [pc, #232]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b38      	ldr	r3, [pc, #224]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b34      	ldr	r3, [pc, #208]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a33      	ldr	r2, [pc, #204]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b31      	ldr	r3, [pc, #196]	@ (8001710 <MX_GPIO_Init+0x124>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <MX_GPIO_Init+0x124>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a2c      	ldr	r2, [pc, #176]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <MX_GPIO_Init+0x124>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001672:	2200      	movs	r2, #0
 8001674:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8001678:	4826      	ldr	r0, [pc, #152]	@ (8001714 <MX_GPIO_Init+0x128>)
 800167a:	f001 f899 	bl	80027b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2140      	movs	r1, #64	@ 0x40
 8001682:	4825      	ldr	r0, [pc, #148]	@ (8001718 <MX_GPIO_Init+0x12c>)
 8001684:	f001 f894 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001688:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	481d      	ldr	r0, [pc, #116]	@ (8001714 <MX_GPIO_Init+0x128>)
 80016a0:	f000 feea 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC5 PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016a4:	f240 13ef 	movw	r3, #495	@ 0x1ef
 80016a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4815      	ldr	r0, [pc, #84]	@ (8001714 <MX_GPIO_Init+0x128>)
 80016be:	f000 fedb 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 PB15
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80016c2:	f24e 4320 	movw	r3, #58400	@ 0xe420
 80016c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	4810      	ldr	r0, [pc, #64]	@ (8001718 <MX_GPIO_Init+0x12c>)
 80016d8:	f000 fece 	bl	8002478 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016dc:	2340      	movs	r3, #64	@ 0x40
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4809      	ldr	r0, [pc, #36]	@ (8001718 <MX_GPIO_Init+0x12c>)
 80016f4:	f000 fec0 	bl	8002478 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2028      	movs	r0, #40	@ 0x28
 80016fe:	f000 fe84 	bl	800240a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001702:	2028      	movs	r0, #40	@ 0x28
 8001704:	f000 fe9d 	bl	8002442 <HAL_NVIC_EnableIRQ>

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40020800 	.word	0x40020800
 8001718:	40020400 	.word	0x40020400

0800171c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_I2C1_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <MX_I2C1_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_I2C1_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <MX_I2C1_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_I2C1_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_I2C1_Init+0x50>)
 800175a:	f001 f85b 	bl	8002814 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001764:	f000 f8d2 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000160 	.word	0x20000160
 8001770:	40005400 	.word	0x40005400
 8001774:	00061a80 	.word	0x00061a80

08001778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	@ (80017fc <HAL_I2C_MspInit+0x84>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12c      	bne.n	80017f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_I2C_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a17      	ldr	r2, [pc, #92]	@ (8001800 <HAL_I2C_MspInit+0x88>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_I2C_MspInit+0x88>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017bc:	2312      	movs	r3, #18
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c8:	2304      	movs	r3, #4
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	480c      	ldr	r0, [pc, #48]	@ (8001804 <HAL_I2C_MspInit+0x8c>)
 80017d4:	f000 fe50 	bl	8002478 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_I2C_MspInit+0x88>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_I2C_MspInit+0x88>)
 80017e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_I2C_MspInit+0x88>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017f4:	bf00      	nop
 80017f6:	3728      	adds	r7, #40	@ 0x28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40005400 	.word	0x40005400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020400 	.word	0x40020400

08001808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800180c:	f000 fc8c 	bl	8002128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001810:	f000 f814 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001814:	f7ff feea 	bl	80015ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8001818:	f7ff ff80 	bl	800171c <MX_I2C1_Init>
  MX_SPI1_Init();
 800181c:	f000 f87c 	bl	8001918 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001820:	f000 fa24 	bl	8001c6c <MX_TIM2_Init>
  MX_TIM5_Init();
 8001824:	f000 fa98 	bl	8001d58 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001828:	f000 fbe2 	bl	8001ff0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800182c:	f000 fb0c 	bl	8001e48 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 8001830:	f7ff fd10 	bl	8001254 <apInit>
  apMain();
 8001834:	f7ff fd14 	bl	8001260 <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <main+0x30>

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	@ 0x50
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2230      	movs	r2, #48	@ 0x30
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f004 fa42 	bl	8005cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <SystemClock_Config+0xc8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <SystemClock_Config+0xc8>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <SystemClock_Config+0xc8>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <SystemClock_Config+0xcc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a20      	ldr	r2, [pc, #128]	@ (8001908 <SystemClock_Config+0xcc>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <SystemClock_Config+0xcc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018b0:	2364      	movs	r3, #100	@ 0x64
 80018b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	4618      	mov	r0, r3
 80018c2:	f001 fc45 	bl	8003150 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018cc:	f000 f81e 	bl	800190c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	230f      	movs	r3, #15
 80018d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2103      	movs	r1, #3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fea7 	bl	8003640 <HAL_RCC_ClockConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f8:	f000 f808 	bl	800190c <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3750      	adds	r7, #80	@ 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000

0800190c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <MX_SPI1_Init+0x64>)
 800191e:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <MX_SPI1_Init+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b16      	ldr	r3, [pc, #88]	@ (800197c <MX_SPI1_Init+0x64>)
 8001924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MX_SPI1_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <MX_SPI1_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	@ (800197c <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_SPI1_Init+0x64>)
 8001944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800194a:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_SPI1_Init+0x64>)
 800194c:	2218      	movs	r2, #24
 800194e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <MX_SPI1_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_SPI1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	@ (800197c <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_SPI1_Init+0x64>)
 8001964:	220a      	movs	r2, #10
 8001966:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	@ (800197c <MX_SPI1_Init+0x64>)
 800196a:	f002 f889 	bl	8003a80 <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001974:	f7ff ffca 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200001b4 	.word	0x200001b4
 8001980:	40013000 	.word	0x40013000

08001984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_SPI_MspInit+0x84>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <HAL_SPI_MspInit+0x88>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23e0      	movs	r3, #224	@ 0xe0
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ee:	2305      	movs	r3, #5
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <HAL_SPI_MspInit+0x8c>)
 80019fa:	f000 fd3d 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000

08001a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	4a0f      	ldr	r2, [pc, #60]	@ (8001a60 <HAL_MspInit+0x4c>)
 8001a24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <HAL_MspInit+0x4c>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <HAL_MspInit+0x4c>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <HAL_MspInit+0x4c>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <NMI_Handler+0x4>

08001a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aba:	f000 fb87 	bl	80021cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001aca:	f002 fcd1 	bl	8004470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002a0 	.word	0x200002a0

08001ad8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001adc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ae0:	f000 fe80 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ae4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ae8:	f000 fe7c 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001aec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001af0:	f000 fe78 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001af4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001af8:	f000 fe74 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	e00a      	b.n	8001b28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b12:	f3af 8000 	nop.w
 8001b16:	4601      	mov	r1, r0
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	60ba      	str	r2, [r7, #8]
 8001b1e:	b2ca      	uxtb	r2, r1
 8001b20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	dbf0      	blt.n	8001b12 <_read+0x12>
  }

  return len;
 8001b30:	687b      	ldr	r3, [r7, #4]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	e009      	b.n	8001b60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fd2b 	bl	80015b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	dbf1      	blt.n	8001b4c <_write+0x12>
  }
  return len;
 8001b68:	687b      	ldr	r3, [r7, #4]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_close>:

int _close(int file)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_isatty>:

int _isatty(int file)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	@ (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	@ (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f004 f8b0 	bl	8005d70 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20020000 	.word	0x20020000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	2000020c 	.word	0x2000020c
 8001c44:	20000480 	.word	0x20000480

08001c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <SystemInit+0x20>)
 8001c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c52:	4a05      	ldr	r2, [pc, #20]	@ (8001c68 <SystemInit+0x20>)
 8001c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08e      	sub	sp, #56	@ 0x38
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001c9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000-1;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001ca6:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001caa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b29      	ldr	r3, [pc, #164]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001cb2:	4b28      	ldr	r3, [pc, #160]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001cb4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc6:	4823      	ldr	r0, [pc, #140]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001cc8:	f002 f9e8 	bl	800409c <HAL_TIM_Base_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001cd2:	f7ff fe1b 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cdc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	481c      	ldr	r0, [pc, #112]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001ce4:	f002 fd76 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001cee:	f7ff fe0d 	bl	800190c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cf2:	4818      	ldr	r0, [pc, #96]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001cf4:	f002 fab3 	bl	800425e <HAL_TIM_PWM_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001cfe:	f7ff fe05 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d0a:	f107 0320 	add.w	r3, r7, #32
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4810      	ldr	r0, [pc, #64]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001d12:	f003 f927 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d1c:	f7ff fdf6 	bl	800190c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d20:	2360      	movs	r3, #96	@ 0x60
 8001d22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	4807      	ldr	r0, [pc, #28]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001d38:	f002 fc8a 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001d42:	f7ff fde3 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d46:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <MX_TIM2_Init+0xe8>)
 8001d48:	f000 f8f4 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	@ 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000210 	.word	0x20000210

08001d58 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08e      	sub	sp, #56	@ 0x38
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001d8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001e44 <MX_TIM5_Init+0xec>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2000-1;
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001d90:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001d94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b2a      	ldr	r3, [pc, #168]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001d9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001db0:	4823      	ldr	r0, [pc, #140]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001db2:	f002 f973 	bl	800409c <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001dbc:	f7ff fda6 	bl	800190c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	481c      	ldr	r0, [pc, #112]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001dce:	f002 fd01 	bl	80047d4 <HAL_TIM_ConfigClockSource>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001dd8:	f7ff fd98 	bl	800190c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ddc:	4818      	ldr	r0, [pc, #96]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001dde:	f002 fa3e 	bl	800425e <HAL_TIM_PWM_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001de8:	f7ff fd90 	bl	800190c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4811      	ldr	r0, [pc, #68]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001dfc:	f003 f8b2 	bl	8004f64 <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001e06:	f7ff fd81 	bl	800190c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0a:	2360      	movs	r3, #96	@ 0x60
 8001e0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001e22:	f002 fc15 	bl	8004650 <HAL_TIM_PWM_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001e2c:	f7ff fd6e 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <MX_TIM5_Init+0xe8>)
 8001e32:	f000 f87f 	bl	8001f34 <HAL_TIM_MspPostInit>

}
 8001e36:	bf00      	nop
 8001e38:	3738      	adds	r7, #56	@ 0x38
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000258 	.word	0x20000258
 8001e44:	40000c00 	.word	0x40000c00

08001e48 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e8c <MX_TIM10_Init+0x44>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e54:	2263      	movs	r2, #99	@ 0x63
 8001e56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <MX_TIM10_Init+0x40>)
 8001e74:	f002 f912 	bl	800409c <HAL_TIM_Base_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001e7e:	f7ff fd45 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200002a0 	.word	0x200002a0
 8001e8c:	40014400 	.word	0x40014400

08001e90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b20      	ldr	r3, [pc, #128]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001ebe:	e02e      	b.n	8001f1e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <HAL_TIM_Base_MspInit+0x9c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	4a15      	ldr	r2, [pc, #84]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001ed4:	f043 0308 	orr.w	r3, r3, #8
 8001ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
}
 8001ee6:	e01a      	b.n	8001f1e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a10      	ldr	r2, [pc, #64]	@ (8001f30 <HAL_TIM_Base_MspInit+0xa0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d115      	bne.n	8001f1e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	4a0b      	ldr	r2, [pc, #44]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <HAL_TIM_Base_MspInit+0x98>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2101      	movs	r1, #1
 8001f12:	2019      	movs	r0, #25
 8001f14:	f000 fa79 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f18:	2019      	movs	r0, #25
 8001f1a:	f000 fa92 	bl	8002442 <HAL_NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40014400 	.word	0x40014400

08001f34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	@ 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d11f      	bne.n	8001f96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001f90:	f000 fa72 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f94:	e022      	b.n	8001fdc <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM5)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <HAL_TIM_MspPostInit+0xb8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d11d      	bne.n	8001fdc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <HAL_TIM_MspPostInit+0xb0>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4804      	ldr	r0, [pc, #16]	@ (8001fe8 <HAL_TIM_MspPostInit+0xb4>)
 8001fd8:	f000 fa4e 	bl	8002478 <HAL_GPIO_Init>
}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	@ 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	40000c00 	.word	0x40000c00

08001ff0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <MX_USART2_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_USART2_UART_Init+0x4c>)
 8002028:	f003 f81e 	bl	8005068 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002032:	f7ff fc6b 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200002e8 	.word	0x200002e8
 8002040:	40004400 	.word	0x40004400

08002044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	@ 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	@ (80020c8 <HAL_UART_MspInit+0x84>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12b      	bne.n	80020be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_UART_MspInit+0x88>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	4a17      	ldr	r2, [pc, #92]	@ (80020cc <HAL_UART_MspInit+0x88>)
 8002070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002074:	6413      	str	r3, [r2, #64]	@ 0x40
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_UART_MspInit+0x88>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_UART_MspInit+0x88>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a10      	ldr	r2, [pc, #64]	@ (80020cc <HAL_UART_MspInit+0x88>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <HAL_UART_MspInit+0x88>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800209e:	230c      	movs	r3, #12
 80020a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020aa:	2303      	movs	r3, #3
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ae:	2307      	movs	r3, #7
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0314 	add.w	r3, r7, #20
 80020b6:	4619      	mov	r1, r3
 80020b8:	4805      	ldr	r0, [pc, #20]	@ (80020d0 <HAL_UART_MspInit+0x8c>)
 80020ba:	f000 f9dd 	bl	8002478 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40004400 	.word	0x40004400
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020000 	.word	0x40020000

080020d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800210c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d8:	f7ff fdb6 	bl	8001c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020de:	490d      	ldr	r1, [pc, #52]	@ (8002114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e4:	e002      	b.n	80020ec <LoopCopyDataInit>

080020e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ea:	3304      	adds	r3, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f0:	d3f9      	bcc.n	80020e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f8:	e001      	b.n	80020fe <LoopFillZerobss>

080020fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020fc:	3204      	adds	r2, #4

080020fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002100:	d3fb      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002102:	f003 fe3b 	bl	8005d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002106:	f7ff fb7f 	bl	8001808 <main>
  bx  lr    
 800210a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800210c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002114:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8002118:	08006c84 	.word	0x08006c84
  ldr r2, =_sbss
 800211c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8002120:	20000480 	.word	0x20000480

08002124 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002124:	e7fe      	b.n	8002124 <ADC_IRQHandler>
	...

08002128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800212c:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <HAL_Init+0x40>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002136:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <HAL_Init+0x40>)
 800213e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002142:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_Init+0x40>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002150:	2003      	movs	r0, #3
 8002152:	f000 f94f 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002156:	200f      	movs	r0, #15
 8002158:	f000 f808 	bl	800216c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800215c:	f7ff fc5a 	bl	8001a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00

0800216c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_InitTick+0x54>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_InitTick+0x58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002182:	fbb3 f3f1 	udiv	r3, r3, r1
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f000 f967 	bl	800245e <HAL_SYSTICK_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00e      	b.n	80021b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d80a      	bhi.n	80021b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f000 f92f 	bl	800240a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ac:	4a06      	ldr	r2, [pc, #24]	@ (80021c8 <HAL_InitTick+0x5c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e000      	b.n	80021b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000006c 	.word	0x2000006c
 80021c4:	20000074 	.word	0x20000074
 80021c8:	20000070 	.word	0x20000070

080021cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_IncTick+0x20>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_IncTick+0x24>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <HAL_IncTick+0x24>)
 80021de:	6013      	str	r3, [r2, #0]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000074 	.word	0x20000074
 80021f0:	20000330 	.word	0x20000330

080021f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return uwTick;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <HAL_GetTick+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000330 	.word	0x20000330

0800220c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff ffee 	bl	80021f4 <HAL_GetTick>
 8002218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002224:	d005      	beq.n	8002232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002226:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <HAL_Delay+0x44>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002232:	bf00      	nop
 8002234:	f7ff ffde 	bl	80021f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	429a      	cmp	r2, r3
 8002242:	d8f7      	bhi.n	8002234 <HAL_Delay+0x28>
  {
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000074 	.word	0x20000074

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	@ (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	@ (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	@ 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241c:	f7ff ff3e 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	6978      	ldr	r0, [r7, #20]
 8002428:	f7ff ff8e 	bl	8002348 <NVIC_EncodePriority>
 800242c:	4602      	mov	r2, r0
 800242e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff5d 	bl	80022f4 <__NVIC_SetPriority>
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff31 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff ffa2 	bl	80023b0 <SysTick_Config>
 800246c:	4603      	mov	r3, r0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	@ 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e159      	b.n	8002748 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002494:	2201      	movs	r2, #1
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	f040 8148 	bne.w	8002742 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d005      	beq.n	80024ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d130      	bne.n	800252c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	2203      	movs	r2, #3
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	69b9      	ldr	r1, [r7, #24]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a2 	beq.w	8002742 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b57      	ldr	r3, [pc, #348]	@ (8002760 <HAL_GPIO_Init+0x2e8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a56      	ldr	r2, [pc, #344]	@ (8002760 <HAL_GPIO_Init+0x2e8>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b54      	ldr	r3, [pc, #336]	@ (8002760 <HAL_GPIO_Init+0x2e8>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a52      	ldr	r2, [pc, #328]	@ (8002764 <HAL_GPIO_Init+0x2ec>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_GPIO_Init+0x2f0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d019      	beq.n	800267a <HAL_GPIO_Init+0x202>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a48      	ldr	r2, [pc, #288]	@ (800276c <HAL_GPIO_Init+0x2f4>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d013      	beq.n	8002676 <HAL_GPIO_Init+0x1fe>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a47      	ldr	r2, [pc, #284]	@ (8002770 <HAL_GPIO_Init+0x2f8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d00d      	beq.n	8002672 <HAL_GPIO_Init+0x1fa>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a46      	ldr	r2, [pc, #280]	@ (8002774 <HAL_GPIO_Init+0x2fc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d007      	beq.n	800266e <HAL_GPIO_Init+0x1f6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a45      	ldr	r2, [pc, #276]	@ (8002778 <HAL_GPIO_Init+0x300>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_GPIO_Init+0x1f2>
 8002666:	2304      	movs	r3, #4
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x204>
 800266a:	2307      	movs	r3, #7
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x204>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x204>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x204>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x204>
 800267a:	2300      	movs	r3, #0
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800268c:	4935      	ldr	r1, [pc, #212]	@ (8002764 <HAL_GPIO_Init+0x2ec>)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b38      	ldr	r3, [pc, #224]	@ (800277c <HAL_GPIO_Init+0x304>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a2f      	ldr	r2, [pc, #188]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b2d      	ldr	r3, [pc, #180]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a24      	ldr	r2, [pc, #144]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ee:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_GPIO_Init+0x304>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002712:	4a1a      	ldr	r2, [pc, #104]	@ (800277c <HAL_GPIO_Init+0x304>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002718:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_GPIO_Init+0x304>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800273c:	4a0f      	ldr	r2, [pc, #60]	@ (800277c <HAL_GPIO_Init+0x304>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	f67f aea2 	bls.w	8002494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3724      	adds	r7, #36	@ 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40013c00 	.word	0x40013c00

08002780 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e001      	b.n	80027a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fa:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fe8e 	bl	8001524 <HAL_GPIO_EXTI_Callback>
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12b      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe ff9c 	bl	8001778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	@ 0x24
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002878:	f001 f8da 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a81      	ldr	r2, [pc, #516]	@ (8002a88 <HAL_I2C_Init+0x274>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d807      	bhi.n	8002898 <HAL_I2C_Init+0x84>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a80      	ldr	r2, [pc, #512]	@ (8002a8c <HAL_I2C_Init+0x278>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e006      	b.n	80028a6 <HAL_I2C_Init+0x92>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a90 <HAL_I2C_Init+0x27c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0e7      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a78      	ldr	r2, [pc, #480]	@ (8002a94 <HAL_I2C_Init+0x280>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002a88 <HAL_I2C_Init+0x274>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d802      	bhi.n	80028e8 <HAL_I2C_Init+0xd4>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e009      	b.n	80028fc <HAL_I2C_Init+0xe8>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	4a69      	ldr	r2, [pc, #420]	@ (8002a98 <HAL_I2C_Init+0x284>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	3301      	adds	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800290e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	495c      	ldr	r1, [pc, #368]	@ (8002a88 <HAL_I2C_Init+0x274>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d819      	bhi.n	8002950 <HAL_I2C_Init+0x13c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e59      	subs	r1, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fbb1 f3f3 	udiv	r3, r1, r3
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_I2C_Init+0x138>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e59      	subs	r1, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	e051      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 800294c:	2304      	movs	r3, #4
 800294e:	e04f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_I2C_Init+0x168>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e012      	b.n	80029a2 <HAL_I2C_Init+0x18e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	0099      	lsls	r1, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x196>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e022      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_I2C_Init+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e58      	subs	r0, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6809      	ldr	r1, [r1, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6911      	ldr	r1, [r2, #16]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68d2      	ldr	r2, [r2, #12]
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	000186a0 	.word	0x000186a0
 8002a8c:	001e847f 	.word	0x001e847f
 8002a90:	003d08ff 	.word	0x003d08ff
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	817b      	strh	r3, [r7, #10]
 8002aac:	4613      	mov	r3, r2
 8002aae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff fba0 	bl	80021f4 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	f040 80e0 	bne.w	8002c84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2319      	movs	r3, #25
 8002aca:	2201      	movs	r2, #1
 8002acc:	4970      	ldr	r1, [pc, #448]	@ (8002c90 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f964 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0d3      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x50>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0cc      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d007      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2221      	movs	r2, #33	@ 0x21
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	893a      	ldrh	r2, [r7, #8]
 8002b42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a50      	ldr	r2, [pc, #320]	@ (8002c94 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b54:	8979      	ldrh	r1, [r7, #10]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f89c 	bl	8002c98 <I2C_MasterRequestWrite>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e08d      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b80:	e066      	b.n	8002c50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fa22 	bl	8002fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	781a      	ldrb	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d11b      	bne.n	8002c24 <HAL_I2C_Master_Transmit+0x188>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	781a      	ldrb	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fa19 	bl	8003060 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00d      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d107      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e01a      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d194      	bne.n	8002b82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	00100002 	.word	0x00100002
 8002c94:	ffff0000 	.word	0xffff0000

08002c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	603b      	str	r3, [r7, #0]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d006      	beq.n	8002cc2 <I2C_MasterRequestWrite+0x2a>
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d003      	beq.n	8002cc2 <I2C_MasterRequestWrite+0x2a>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cc0:	d108      	bne.n	8002cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e00b      	b.n	8002cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd8:	2b12      	cmp	r3, #18
 8002cda:	d107      	bne.n	8002cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f84f 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d12:	d103      	bne.n	8002d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e035      	b.n	8002d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d28:	d108      	bne.n	8002d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d38:	611a      	str	r2, [r3, #16]
 8002d3a:	e01b      	b.n	8002d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d3c:	897b      	ldrh	r3, [r7, #10]
 8002d3e:	11db      	asrs	r3, r3, #7
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0306 	and.w	r3, r3, #6
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	f063 030f 	orn	r3, r3, #15
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	490e      	ldr	r1, [pc, #56]	@ (8002d94 <I2C_MasterRequestWrite+0xfc>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f898 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e010      	b.n	8002d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4907      	ldr	r1, [pc, #28]	@ (8002d98 <I2C_MasterRequestWrite+0x100>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f888 	bl	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	00010008 	.word	0x00010008
 8002d98:	00010002 	.word	0x00010002

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e048      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d044      	beq.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7ff fa1d 	bl	80021f4 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d139      	bne.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	0c1b      	lsrs	r3, r3, #16
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d10d      	bne.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	e00c      	b.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d116      	bne.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e023      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	0c1b      	lsrs	r3, r3, #16
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10d      	bne.n	8002e66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	e00c      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf0c      	ite	eq
 8002e78:	2301      	moveq	r3, #1
 8002e7a:	2300      	movne	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d093      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e9e:	e071      	b.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eae:	d123      	bne.n	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f043 0204 	orr.w	r2, r3, #4
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e067      	b.n	8002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d041      	beq.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	f7ff f978 	bl	80021f4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d136      	bne.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d10c      	bne.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	bf14      	ite	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	2300      	moveq	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	e00b      	b.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f043 0220 	orr.w	r2, r3, #32
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e021      	b.n	8002fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10c      	bne.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e00b      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f47f af6d 	bne.w	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fdc:	e034      	b.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f886 	bl	80030f0 <I2C_IsAcknowledgeFailed>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e034      	b.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d028      	beq.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff6:	f7ff f8fd 	bl	80021f4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11d      	bne.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003016:	2b80      	cmp	r3, #128	@ 0x80
 8003018:	d016      	beq.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e007      	b.n	8003058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003052:	2b80      	cmp	r3, #128	@ 0x80
 8003054:	d1c3      	bne.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306c:	e034      	b.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f83e 	bl	80030f0 <I2C_IsAcknowledgeFailed>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e034      	b.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d028      	beq.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003086:	f7ff f8b5 	bl	80021f4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	d302      	bcc.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d11d      	bne.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d016      	beq.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e007      	b.n	80030e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d1c3      	bne.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003106:	d11b      	bne.n	8003140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f043 0204 	orr.w	r2, r3, #4
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e267      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d075      	beq.n	800325a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800316e:	4b88      	ldr	r3, [pc, #544]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b04      	cmp	r3, #4
 8003178:	d00c      	beq.n	8003194 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4b85      	ldr	r3, [pc, #532]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003182:	2b08      	cmp	r3, #8
 8003184:	d112      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b82      	ldr	r3, [pc, #520]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003192:	d10b      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003194:	4b7e      	ldr	r3, [pc, #504]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d05b      	beq.n	8003258 <HAL_RCC_OscConfig+0x108>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d157      	bne.n	8003258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e242      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x74>
 80031b6:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a75      	ldr	r2, [pc, #468]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e01d      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x98>
 80031ce:	4b70      	ldr	r3, [pc, #448]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	4b6d      	ldr	r3, [pc, #436]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6c      	ldr	r2, [pc, #432]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0xb0>
 80031e8:	4b69      	ldr	r3, [pc, #420]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a68      	ldr	r2, [pc, #416]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b66      	ldr	r3, [pc, #408]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a65      	ldr	r2, [pc, #404]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fff4 	bl	80021f4 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fff0 	bl	80021f4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e207      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b5b      	ldr	r3, [pc, #364]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0xc0>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe ffe0 	bl	80021f4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe ffdc 	bl	80021f4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e1f3      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324a:	4b51      	ldr	r3, [pc, #324]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0xe8>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d063      	beq.n	800332e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003266:	4b4a      	ldr	r3, [pc, #296]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800327a:	2b08      	cmp	r3, #8
 800327c:	d11c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327e:	4b44      	ldr	r3, [pc, #272]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d116      	bne.n	80032b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328a:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <HAL_RCC_OscConfig+0x152>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d001      	beq.n	80032a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1c7      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4937      	ldr	r1, [pc, #220]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032b6:	e03a      	b.n	800332e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d020      	beq.n	8003302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c0:	4b34      	ldr	r3, [pc, #208]	@ (8003394 <HAL_RCC_OscConfig+0x244>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe ff95 	bl	80021f4 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe ff91 	bl	80021f4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e1a8      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b28      	ldr	r3, [pc, #160]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4925      	ldr	r1, [pc, #148]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003302:	4b24      	ldr	r3, [pc, #144]	@ (8003394 <HAL_RCC_OscConfig+0x244>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe ff74 	bl	80021f4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe ff70 	bl	80021f4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e187      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003322:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d036      	beq.n	80033a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d016      	beq.n	8003370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003342:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <HAL_RCC_OscConfig+0x248>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fe ff54 	bl	80021f4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe ff50 	bl	80021f4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e167      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003362:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_RCC_OscConfig+0x240>)
 8003364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x200>
 800336e:	e01b      	b.n	80033a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_RCC_OscConfig+0x248>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7fe ff3d 	bl	80021f4 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337c:	e00e      	b.n	800339c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337e:	f7fe ff39 	bl	80021f4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d907      	bls.n	800339c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e150      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
 8003390:	40023800 	.word	0x40023800
 8003394:	42470000 	.word	0x42470000
 8003398:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800339c:	4b88      	ldr	r3, [pc, #544]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800339e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1ea      	bne.n	800337e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8097 	beq.w	80034e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ba:	4b81      	ldr	r3, [pc, #516]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	4b7d      	ldr	r3, [pc, #500]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	4a7c      	ldr	r2, [pc, #496]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d6:	4b7a      	ldr	r3, [pc, #488]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e6:	4b77      	ldr	r3, [pc, #476]	@ (80035c4 <HAL_RCC_OscConfig+0x474>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d118      	bne.n	8003424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f2:	4b74      	ldr	r3, [pc, #464]	@ (80035c4 <HAL_RCC_OscConfig+0x474>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a73      	ldr	r2, [pc, #460]	@ (80035c4 <HAL_RCC_OscConfig+0x474>)
 80033f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fe:	f7fe fef9 	bl	80021f4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003406:	f7fe fef5 	bl	80021f4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e10c      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003418:	4b6a      	ldr	r3, [pc, #424]	@ (80035c4 <HAL_RCC_OscConfig+0x474>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x2ea>
 800342c:	4b64      	ldr	r3, [pc, #400]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003430:	4a63      	ldr	r2, [pc, #396]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	@ 0x70
 8003438:	e01c      	b.n	8003474 <HAL_RCC_OscConfig+0x324>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b05      	cmp	r3, #5
 8003440:	d10c      	bne.n	800345c <HAL_RCC_OscConfig+0x30c>
 8003442:	4b5f      	ldr	r3, [pc, #380]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	4a5e      	ldr	r2, [pc, #376]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6713      	str	r3, [r2, #112]	@ 0x70
 800344e:	4b5c      	ldr	r3, [pc, #368]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	4a5b      	ldr	r2, [pc, #364]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	6713      	str	r3, [r2, #112]	@ 0x70
 800345a:	e00b      	b.n	8003474 <HAL_RCC_OscConfig+0x324>
 800345c:	4b58      	ldr	r3, [pc, #352]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003460:	4a57      	ldr	r2, [pc, #348]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	6713      	str	r3, [r2, #112]	@ 0x70
 8003468:	4b55      	ldr	r3, [pc, #340]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346c:	4a54      	ldr	r2, [pc, #336]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 0304 	bic.w	r3, r3, #4
 8003472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d015      	beq.n	80034a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fe feba 	bl	80021f4 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	e00a      	b.n	800349a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fe feb6 	bl	80021f4 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e0cb      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349a:	4b49      	ldr	r3, [pc, #292]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0ee      	beq.n	8003484 <HAL_RCC_OscConfig+0x334>
 80034a6:	e014      	b.n	80034d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a8:	f7fe fea4 	bl	80021f4 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b0:	f7fe fea0 	bl	80021f4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0b5      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c6:	4b3e      	ldr	r3, [pc, #248]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ee      	bne.n	80034b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d2:	7dfb      	ldrb	r3, [r7, #23]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d8:	4b39      	ldr	r3, [pc, #228]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	4a38      	ldr	r2, [pc, #224]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80034de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a1 	beq.w	8003630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ee:	4b34      	ldr	r3, [pc, #208]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d05c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d141      	bne.n	8003586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b31      	ldr	r3, [pc, #196]	@ (80035c8 <HAL_RCC_OscConfig+0x478>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fe74 	bl	80021f4 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fe70 	bl	80021f4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e087      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	4b27      	ldr	r3, [pc, #156]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	3b01      	subs	r3, #1
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	491b      	ldr	r1, [pc, #108]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 8003554:	4313      	orrs	r3, r2
 8003556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <HAL_RCC_OscConfig+0x478>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355e:	f7fe fe49 	bl	80021f4 <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003566:	f7fe fe45 	bl	80021f4 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e05c      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003578:	4b11      	ldr	r3, [pc, #68]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x416>
 8003584:	e054      	b.n	8003630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <HAL_RCC_OscConfig+0x478>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fe32 	bl	80021f4 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe fe2e 	bl	80021f4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e045      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	4b06      	ldr	r3, [pc, #24]	@ (80035c0 <HAL_RCC_OscConfig+0x470>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x444>
 80035b2:	e03d      	b.n	8003630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e038      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40007000 	.word	0x40007000
 80035c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	@ (800363c <HAL_RCC_OscConfig+0x4ec>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d028      	beq.n	800362c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d121      	bne.n	800362c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d11a      	bne.n	800362c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003604:	4293      	cmp	r3, r2
 8003606:	d111      	bne.n	800362c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	3b01      	subs	r3, #1
 8003616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d107      	bne.n	800362c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023800 	.word	0x40023800

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0cc      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b68      	ldr	r3, [pc, #416]	@ (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d90c      	bls.n	800367c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b65      	ldr	r3, [pc, #404]	@ (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	@ (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a58      	ldr	r2, [pc, #352]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800369e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a52      	ldr	r2, [pc, #328]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d044      	beq.n	8003760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d119      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b3f      	ldr	r3, [pc, #252]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e067      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b37      	ldr	r3, [pc, #220]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4934      	ldr	r1, [pc, #208]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fe fd60 	bl	80021f4 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fe fd5c 	bl	80021f4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e04f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2b      	ldr	r3, [pc, #172]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b25      	ldr	r3, [pc, #148]	@ (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d20c      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	490a      	ldr	r1, [pc, #40]	@ (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	fa22 f303 	lsr.w	r3, r2, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	@ (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe fcc0 	bl	800216c <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023c00 	.word	0x40023c00
 80037fc:	40023800 	.word	0x40023800
 8003800:	08006c28 	.word	0x08006c28
 8003804:	2000006c 	.word	0x2000006c
 8003808:	20000070 	.word	0x20000070

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003810:	b094      	sub	sp, #80	@ 0x50
 8003812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003824:	4b79      	ldr	r3, [pc, #484]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b08      	cmp	r3, #8
 800382e:	d00d      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x40>
 8003830:	2b08      	cmp	r3, #8
 8003832:	f200 80e1 	bhi.w	80039f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x34>
 800383a:	2b04      	cmp	r3, #4
 800383c:	d003      	beq.n	8003846 <HAL_RCC_GetSysClockFreq+0x3a>
 800383e:	e0db      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b73      	ldr	r3, [pc, #460]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8003842:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003844:	e0db      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003846:	4b73      	ldr	r3, [pc, #460]	@ (8003a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8003848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800384a:	e0d8      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800384c:	4b6f      	ldr	r3, [pc, #444]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003854:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003856:	4b6d      	ldr	r3, [pc, #436]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d063      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003862:	4b6a      	ldr	r3, [pc, #424]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	2200      	movs	r2, #0
 800386a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800386c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800386e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003874:	633b      	str	r3, [r7, #48]	@ 0x30
 8003876:	2300      	movs	r3, #0
 8003878:	637b      	str	r3, [r7, #52]	@ 0x34
 800387a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800387e:	4622      	mov	r2, r4
 8003880:	462b      	mov	r3, r5
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f04f 0100 	mov.w	r1, #0
 800388a:	0159      	lsls	r1, r3, #5
 800388c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003890:	0150      	lsls	r0, r2, #5
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4621      	mov	r1, r4
 8003898:	1a51      	subs	r1, r2, r1
 800389a:	6139      	str	r1, [r7, #16]
 800389c:	4629      	mov	r1, r5
 800389e:	eb63 0301 	sbc.w	r3, r3, r1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038b0:	4659      	mov	r1, fp
 80038b2:	018b      	lsls	r3, r1, #6
 80038b4:	4651      	mov	r1, sl
 80038b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038ba:	4651      	mov	r1, sl
 80038bc:	018a      	lsls	r2, r1, #6
 80038be:	4651      	mov	r1, sl
 80038c0:	ebb2 0801 	subs.w	r8, r2, r1
 80038c4:	4659      	mov	r1, fp
 80038c6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038de:	4690      	mov	r8, r2
 80038e0:	4699      	mov	r9, r3
 80038e2:	4623      	mov	r3, r4
 80038e4:	eb18 0303 	adds.w	r3, r8, r3
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	462b      	mov	r3, r5
 80038ec:	eb49 0303 	adc.w	r3, r9, r3
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038fe:	4629      	mov	r1, r5
 8003900:	024b      	lsls	r3, r1, #9
 8003902:	4621      	mov	r1, r4
 8003904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003908:	4621      	mov	r1, r4
 800390a:	024a      	lsls	r2, r1, #9
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003912:	2200      	movs	r2, #0
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800391c:	f7fc fcc0 	bl	80002a0 <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4613      	mov	r3, r2
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003928:	e058      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392a:	4b38      	ldr	r3, [pc, #224]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	2200      	movs	r2, #0
 8003932:	4618      	mov	r0, r3
 8003934:	4611      	mov	r1, r2
 8003936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003944:	4642      	mov	r2, r8
 8003946:	464b      	mov	r3, r9
 8003948:	f04f 0000 	mov.w	r0, #0
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	0159      	lsls	r1, r3, #5
 8003952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003956:	0150      	lsls	r0, r2, #5
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4641      	mov	r1, r8
 800395e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003962:	4649      	mov	r1, r9
 8003964:	eb63 0b01 	sbc.w	fp, r3, r1
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800397c:	ebb2 040a 	subs.w	r4, r2, sl
 8003980:	eb63 050b 	sbc.w	r5, r3, fp
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	00eb      	lsls	r3, r5, #3
 800398e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003992:	00e2      	lsls	r2, r4, #3
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	4643      	mov	r3, r8
 800399a:	18e3      	adds	r3, r4, r3
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	464b      	mov	r3, r9
 80039a0:	eb45 0303 	adc.w	r3, r5, r3
 80039a4:	607b      	str	r3, [r7, #4]
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039b2:	4629      	mov	r1, r5
 80039b4:	028b      	lsls	r3, r1, #10
 80039b6:	4621      	mov	r1, r4
 80039b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039bc:	4621      	mov	r1, r4
 80039be:	028a      	lsls	r2, r1, #10
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c6:	2200      	movs	r2, #0
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	61fa      	str	r2, [r7, #28]
 80039cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d0:	f7fc fc66 	bl	80002a0 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4613      	mov	r3, r2
 80039da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	0c1b      	lsrs	r3, r3, #16
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	3301      	adds	r3, #1
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f6:	e002      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80039fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3750      	adds	r7, #80	@ 0x50
 8003a04:	46bd      	mov	sp, r7
 8003a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	00f42400 	.word	0x00f42400
 8003a14:	007a1200 	.word	0x007a1200

08003a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	@ (8003a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2000006c 	.word	0x2000006c

08003a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a34:	f7ff fff0 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	0a9b      	lsrs	r3, r3, #10
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	4903      	ldr	r1, [pc, #12]	@ (8003a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a46:	5ccb      	ldrb	r3, [r1, r3]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40023800 	.word	0x40023800
 8003a54:	08006c38 	.word	0x08006c38

08003a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a5c:	f7ff ffdc 	bl	8003a18 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	0b5b      	lsrs	r3, r3, #13
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	@ (8003a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08006c38 	.word	0x08006c38

08003a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07b      	b.n	8003b8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d108      	bne.n	8003aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aa2:	d009      	beq.n	8003ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]
 8003aaa:	e005      	b.n	8003ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7fd ff56 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	ea42 0103 	orr.w	r1, r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f003 0104 	and.w	r1, r3, #4
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	f003 0210 	and.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b08a      	sub	sp, #40	@ 0x28
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ba4:	f7fe fb26 	bl	80021f4 <HAL_GetTick>
 8003ba8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bb0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bbc:	7ffb      	ldrb	r3, [r7, #31]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d00c      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x4a>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bc8:	d106      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x46>
 8003bd2:	7ffb      	ldrb	r3, [r7, #31]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d001      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e17f      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x5c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x5c>
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e174      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x6e>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e16d      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d003      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2205      	movs	r2, #5
 8003c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	887a      	ldrh	r2, [r7, #2]
 8003c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	887a      	ldrh	r2, [r7, #2]
 8003c32:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	887a      	ldrh	r2, [r7, #2]
 8003c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	887a      	ldrh	r2, [r7, #2]
 8003c44:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5c:	2b40      	cmp	r3, #64	@ 0x40
 8003c5e:	d007      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c78:	d17e      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_SPI_TransmitReceive+0xf6>
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d16c      	bne.n	8003d62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cac:	e059      	b.n	8003d62 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d11b      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x162>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <HAL_SPI_TransmitReceive+0x162>
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d113      	bne.n	8003cf4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d119      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x1a4>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d014      	beq.n	8003d36 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d16:	b292      	uxth	r2, r2
 8003d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	1c9a      	adds	r2, r3, #2
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d32:	2301      	movs	r3, #1
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d36:	f7fe fa5d 	bl	80021f4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d80d      	bhi.n	8003d62 <HAL_SPI_TransmitReceive+0x1d0>
 8003d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d009      	beq.n	8003d62 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0bc      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1a0      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x11c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d19b      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x11c>
 8003d76:	e082      	b.n	8003e7e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x1f4>
 8003d80:	8afb      	ldrh	r3, [r7, #22]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d171      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dac:	e05d      	b.n	8003e6a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d11c      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x264>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d017      	beq.n	8003df6 <HAL_SPI_TransmitReceive+0x264>
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d114      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d119      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x2a6>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e18:	b2d2      	uxtb	r2, r2
 8003e1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e38:	f7fe f9dc 	bl	80021f4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d803      	bhi.n	8003e50 <HAL_SPI_TransmitReceive+0x2be>
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d102      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x2c4>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e038      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d19c      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x21c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d197      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f8b6 	bl	8003ff4 <SPI_EndRxTxTransaction>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e01d      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3728      	adds	r7, #40	@ 0x28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ef4:	f7fe f97e 	bl	80021f4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f04:	f7fe f976 	bl	80021f4 <HAL_GetTick>
 8003f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	015b      	lsls	r3, r3, #5
 8003f10:	0d1b      	lsrs	r3, r3, #20
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1a:	e054      	b.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d050      	beq.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f24:	f7fe f966 	bl	80021f4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d902      	bls.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d13d      	bne.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f52:	d111      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f5c:	d004      	beq.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f66:	d107      	bne.n	8003f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f80:	d10f      	bne.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e017      	b.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	461a      	mov	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d19b      	bne.n	8003f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	2000006c 	.word	0x2000006c

08003ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2201      	movs	r2, #1
 8004008:	2102      	movs	r1, #2
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f7ff ff6a 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	f043 0220 	orr.w	r2, r3, #32
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e032      	b.n	800408c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <SPI_EndRxTxTransaction+0xa0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <SPI_EndRxTxTransaction+0xa4>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	0d5b      	lsrs	r3, r3, #21
 8004032:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004044:	d112      	bne.n	800406c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2200      	movs	r2, #0
 800404e:	2180      	movs	r1, #128	@ 0x80
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff ff47 	bl	8003ee4 <SPI_WaitFlagStateUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d016      	beq.n	800408a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e00f      	b.n	800408c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	3b01      	subs	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004082:	2b80      	cmp	r3, #128	@ 0x80
 8004084:	d0f2      	beq.n	800406c <SPI_EndRxTxTransaction+0x78>
 8004086:	e000      	b.n	800408a <SPI_EndRxTxTransaction+0x96>
        break;
 8004088:	bf00      	nop
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	2000006c 	.word	0x2000006c
 8004098:	165e9f81 	.word	0x165e9f81

0800409c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e041      	b.n	8004132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd fee4 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f000 fc6a 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e044      	b.n	80041de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a1e      	ldr	r2, [pc, #120]	@ (80041ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d018      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417e:	d013      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1a      	ldr	r2, [pc, #104]	@ (80041f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00e      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x6c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a19      	ldr	r2, [pc, #100]	@ (80041f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d009      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a17      	ldr	r2, [pc, #92]	@ (80041f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d004      	beq.n	80041a8 <HAL_TIM_Base_Start_IT+0x6c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a16      	ldr	r2, [pc, #88]	@ (80041fc <HAL_TIM_Base_Start_IT+0xc0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d111      	bne.n	80041cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b06      	cmp	r3, #6
 80041b8:	d010      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ca:	e007      	b.n	80041dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40014000 	.word	0x40014000

08004200 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a1a      	ldr	r2, [r3, #32]
 800421e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10f      	bne.n	8004248 <HAL_TIM_Base_Stop_IT+0x48>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <HAL_TIM_Base_Stop_IT+0x48>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b082      	sub	sp, #8
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e041      	b.n	80042f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f839 	bl	80042fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f000 fb89 	bl	80049b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_TIM_PWM_Start+0x24>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b01      	cmp	r3, #1
 800432a:	bf14      	ite	ne
 800432c:	2301      	movne	r3, #1
 800432e:	2300      	moveq	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	e022      	b.n	800437a <HAL_TIM_PWM_Start+0x6a>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b04      	cmp	r3, #4
 8004338:	d109      	bne.n	800434e <HAL_TIM_PWM_Start+0x3e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b01      	cmp	r3, #1
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	e015      	b.n	800437a <HAL_TIM_PWM_Start+0x6a>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d109      	bne.n	8004368 <HAL_TIM_PWM_Start+0x58>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	bf14      	ite	ne
 8004360:	2301      	movne	r3, #1
 8004362:	2300      	moveq	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e008      	b.n	800437a <HAL_TIM_PWM_Start+0x6a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b01      	cmp	r3, #1
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e068      	b.n	8004454 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d104      	bne.n	8004392 <HAL_TIM_PWM_Start+0x82>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004390:	e013      	b.n	80043ba <HAL_TIM_PWM_Start+0xaa>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b04      	cmp	r3, #4
 8004396:	d104      	bne.n	80043a2 <HAL_TIM_PWM_Start+0x92>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a0:	e00b      	b.n	80043ba <HAL_TIM_PWM_Start+0xaa>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d104      	bne.n	80043b2 <HAL_TIM_PWM_Start+0xa2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043b0:	e003      	b.n	80043ba <HAL_TIM_PWM_Start+0xaa>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	6839      	ldr	r1, [r7, #0]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fda8 	bl	8004f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a23      	ldr	r2, [pc, #140]	@ (800445c <HAL_TIM_PWM_Start+0x14c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d107      	bne.n	80043e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	@ (800445c <HAL_TIM_PWM_Start+0x14c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <HAL_TIM_PWM_Start+0x10e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f4:	d013      	beq.n	800441e <HAL_TIM_PWM_Start+0x10e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <HAL_TIM_PWM_Start+0x150>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <HAL_TIM_PWM_Start+0x10e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a17      	ldr	r2, [pc, #92]	@ (8004464 <HAL_TIM_PWM_Start+0x154>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <HAL_TIM_PWM_Start+0x10e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a16      	ldr	r2, [pc, #88]	@ (8004468 <HAL_TIM_PWM_Start+0x158>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_TIM_PWM_Start+0x10e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a14      	ldr	r2, [pc, #80]	@ (800446c <HAL_TIM_PWM_Start+0x15c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d111      	bne.n	8004442 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d010      	beq.n	8004452 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	e007      	b.n	8004452 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f042 0201 	orr.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0202 	mvn.w	r2, #2
 80044a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa5b 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa4d 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fa5e 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0204 	mvn.w	r2, #4
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa35 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa27 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fa38 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0208 	mvn.w	r2, #8
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa0f 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fa01 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa12 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d020      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0210 	mvn.w	r2, #16
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2208      	movs	r2, #8
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9e9 	bl	8004976 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9db 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9ec 	bl	800498a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0201 	mvn.w	r2, #1
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc fd52 	bl	8001080 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fd2a 	bl	8005054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9bd 	bl	800499e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0220 	mvn.w	r2, #32
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fcfc 	bl	8005040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466a:	2302      	movs	r3, #2
 800466c:	e0ae      	b.n	80047cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	f200 809f 	bhi.w	80047bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080047bd 	.word	0x080047bd
 800468c:	080047bd 	.word	0x080047bd
 8004690:	080047bd 	.word	0x080047bd
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080047bd 	.word	0x080047bd
 800469c:	080047bd 	.word	0x080047bd
 80046a0:	080047bd 	.word	0x080047bd
 80046a4:	0800473b 	.word	0x0800473b
 80046a8:	080047bd 	.word	0x080047bd
 80046ac:	080047bd 	.word	0x080047bd
 80046b0:	080047bd 	.word	0x080047bd
 80046b4:	0800477b 	.word	0x0800477b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fa04 	bl	8004acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6999      	ldr	r1, [r3, #24]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	619a      	str	r2, [r3, #24]
      break;
 80046f6:	e064      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fa4a 	bl	8004b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	699a      	ldr	r2, [r3, #24]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6999      	ldr	r1, [r3, #24]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	619a      	str	r2, [r3, #24]
      break;
 8004738:	e043      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa95 	bl	8004c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0208 	orr.w	r2, r2, #8
 8004754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0204 	bic.w	r2, r2, #4
 8004764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69d9      	ldr	r1, [r3, #28]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	61da      	str	r2, [r3, #28]
      break;
 8004778:	e023      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fadf 	bl	8004d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69da      	ldr	r2, [r3, #28]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	021a      	lsls	r2, r3, #8
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	61da      	str	r2, [r3, #28]
      break;
 80047ba:	e002      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	75fb      	strb	r3, [r7, #23]
      break;
 80047c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_TIM_ConfigClockSource+0x1c>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0b4      	b.n	800495a <HAL_TIM_ConfigClockSource+0x186>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800480e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004828:	d03e      	beq.n	80048a8 <HAL_TIM_ConfigClockSource+0xd4>
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800482e:	f200 8087 	bhi.w	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004836:	f000 8086 	beq.w	8004946 <HAL_TIM_ConfigClockSource+0x172>
 800483a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483e:	d87f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b70      	cmp	r3, #112	@ 0x70
 8004842:	d01a      	beq.n	800487a <HAL_TIM_ConfigClockSource+0xa6>
 8004844:	2b70      	cmp	r3, #112	@ 0x70
 8004846:	d87b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b60      	cmp	r3, #96	@ 0x60
 800484a:	d050      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x11a>
 800484c:	2b60      	cmp	r3, #96	@ 0x60
 800484e:	d877      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b50      	cmp	r3, #80	@ 0x50
 8004852:	d03c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xfa>
 8004854:	2b50      	cmp	r3, #80	@ 0x50
 8004856:	d873      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b40      	cmp	r3, #64	@ 0x40
 800485a:	d058      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x13a>
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d86f      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b30      	cmp	r3, #48	@ 0x30
 8004862:	d064      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	2b30      	cmp	r3, #48	@ 0x30
 8004866:	d86b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b20      	cmp	r3, #32
 800486a:	d060      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d867      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d05c      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d05a      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x15a>
 8004878:	e062      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800488a:	f000 fb25 	bl	8004ed8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800489c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	609a      	str	r2, [r3, #8]
      break;
 80048a6:	e04f      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	f000 fb0e 	bl	8004ed8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ca:	609a      	str	r2, [r3, #8]
      break;
 80048cc:	e03c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048da:	461a      	mov	r2, r3
 80048dc:	f000 fa82 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2150      	movs	r1, #80	@ 0x50
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fadb 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 80048ec:	e02c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fa:	461a      	mov	r2, r3
 80048fc:	f000 faa1 	bl	8004e42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2160      	movs	r1, #96	@ 0x60
 8004906:	4618      	mov	r0, r3
 8004908:	f000 facb 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 800490c:	e01c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491a:	461a      	mov	r2, r3
 800491c:	f000 fa62 	bl	8004de4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2140      	movs	r1, #64	@ 0x40
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fabb 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 800492c:	e00c      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f000 fab2 	bl	8004ea2 <TIM_ITRx_SetConfig>
      break;
 800493e:	e003      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      break;
 8004944:	e000      	b.n	8004948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab0 <TIM_Base_SetConfig+0xfc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00f      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d2:	d00b      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a37      	ldr	r2, [pc, #220]	@ (8004ab4 <TIM_Base_SetConfig+0x100>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d007      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a36      	ldr	r2, [pc, #216]	@ (8004ab8 <TIM_Base_SetConfig+0x104>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_Base_SetConfig+0x38>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a35      	ldr	r2, [pc, #212]	@ (8004abc <TIM_Base_SetConfig+0x108>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab0 <TIM_Base_SetConfig+0xfc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01b      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a0c:	d017      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a28      	ldr	r2, [pc, #160]	@ (8004ab4 <TIM_Base_SetConfig+0x100>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d013      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a27      	ldr	r2, [pc, #156]	@ (8004ab8 <TIM_Base_SetConfig+0x104>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00f      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a26      	ldr	r2, [pc, #152]	@ (8004abc <TIM_Base_SetConfig+0x108>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d00b      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a25      	ldr	r2, [pc, #148]	@ (8004ac0 <TIM_Base_SetConfig+0x10c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d007      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a24      	ldr	r2, [pc, #144]	@ (8004ac4 <TIM_Base_SetConfig+0x110>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_Base_SetConfig+0x8a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a23      	ldr	r2, [pc, #140]	@ (8004ac8 <TIM_Base_SetConfig+0x114>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d108      	bne.n	8004a50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab0 <TIM_Base_SetConfig+0xfc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f023 0201 	bic.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]
  }
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0201 	bic.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0302 	bic.w	r3, r3, #2
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a1c      	ldr	r2, [pc, #112]	@ (8004b94 <TIM_OC1_SetConfig+0xc8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d10c      	bne.n	8004b42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f023 0308 	bic.w	r3, r3, #8
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 0304 	bic.w	r3, r3, #4
 8004b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a13      	ldr	r2, [pc, #76]	@ (8004b94 <TIM_OC1_SetConfig+0xc8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d111      	bne.n	8004b6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	621a      	str	r2, [r3, #32]
}
 8004b88:	bf00      	nop
 8004b8a:	371c      	adds	r7, #28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40010000 	.word	0x40010000

08004b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0210 	bic.w	r2, r3, #16
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f023 0320 	bic.w	r3, r3, #32
 8004be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <TIM_OC2_SetConfig+0xd4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10d      	bne.n	8004c14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <TIM_OC2_SetConfig+0xd4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d113      	bne.n	8004c44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000

08004c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0303 	bic.w	r3, r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d40 <TIM_OC3_SetConfig+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10d      	bne.n	8004cea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <TIM_OC3_SetConfig+0xd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d113      	bne.n	8004d1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40010000 	.word	0x40010000

08004d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	031b      	lsls	r3, r3, #12
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <TIM_OC4_SetConfig+0x9c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004daa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	019b      	lsls	r3, r3, #6
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f023 030a 	bic.w	r3, r3, #10
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f023 0210 	bic.w	r2, r3, #16
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	031b      	lsls	r3, r3, #12
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	011b      	lsls	r3, r3, #4
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f043 0307 	orr.w	r3, r3, #7
 8004ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	609a      	str	r2, [r3, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	609a      	str	r2, [r3, #8]
}
 8004f0c:	bf00      	nop
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1a      	ldr	r2, [r3, #32]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d101      	bne.n	8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f78:	2302      	movs	r3, #2
 8004f7a:	e050      	b.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	@ (800502c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc8:	d013      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a18      	ldr	r2, [pc, #96]	@ (8005030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a16      	ldr	r2, [pc, #88]	@ (8005034 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	@ (8005038 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	@ (800503c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10c      	bne.n	800500c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	4313      	orrs	r3, r2
 8005002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40014000 	.word	0x40014000

08005040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e042      	b.n	8005100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc ffd8 	bl	8002044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f973 	bl	8005398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	@ 0x28
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	603b      	str	r3, [r7, #0]
 8005114:	4613      	mov	r3, r2
 8005116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b20      	cmp	r3, #32
 8005126:	d175      	bne.n	8005214 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <HAL_UART_Transmit+0x2c>
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e06e      	b.n	8005216 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2221      	movs	r2, #33	@ 0x21
 8005142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005146:	f7fd f855 	bl	80021f4 <HAL_GetTick>
 800514a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	88fa      	ldrh	r2, [r7, #6]
 8005156:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005160:	d108      	bne.n	8005174 <HAL_UART_Transmit+0x6c>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d104      	bne.n	8005174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e003      	b.n	800517c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800517c:	e02e      	b.n	80051dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	@ 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f848 	bl	800521e <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e03a      	b.n	8005216 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	3302      	adds	r3, #2
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	e007      	b.n	80051ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3301      	adds	r3, #1
 80051cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1cb      	bne.n	800517e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2140      	movs	r1, #64	@ 0x40
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f000 f814 	bl	800521e <UART_WaitOnFlagUntilTimeout>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
  }
}
 8005216:	4618      	mov	r0, r3
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800522e:	e03b      	b.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005236:	d037      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005238:	f7fc ffdc 	bl	80021f4 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	429a      	cmp	r2, r3
 8005246:	d302      	bcc.n	800524e <UART_WaitOnFlagUntilTimeout+0x30>
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e03a      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d023      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d020      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d01d      	beq.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b08      	cmp	r3, #8
 8005278:	d116      	bne.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 f81d 	bl	80052d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2208      	movs	r2, #8
 800529a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e00f      	b.n	80052c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d0b4      	beq.n	8005230 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b095      	sub	sp, #84	@ 0x54
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	330c      	adds	r3, #12
 80052f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	e853 3f00 	ldrex	r3, [r3]
 800531a:	61fb      	str	r3, [r7, #28]
   return(result);
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800532c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e5      	bne.n	800530c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d119      	bne.n	800537c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60bb      	str	r3, [r7, #8]
   return(result);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f023 0310 	bic.w	r3, r3, #16
 800535e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005368:	61ba      	str	r2, [r7, #24]
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6979      	ldr	r1, [r7, #20]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	613b      	str	r3, [r7, #16]
   return(result);
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800538a:	bf00      	nop
 800538c:	3754      	adds	r7, #84	@ 0x54
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800539c:	b0c0      	sub	sp, #256	@ 0x100
 800539e:	af00      	add	r7, sp, #0
 80053a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	68d9      	ldr	r1, [r3, #12]
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	ea40 0301 	orr.w	r3, r0, r1
 80053c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80053f0:	f021 010c 	bic.w	r1, r1, #12
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053fe:	430b      	orrs	r3, r1
 8005400:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	6999      	ldr	r1, [r3, #24]
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	ea40 0301 	orr.w	r3, r0, r1
 800541e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b8f      	ldr	r3, [pc, #572]	@ (8005664 <UART_SetConfig+0x2cc>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d005      	beq.n	8005438 <UART_SetConfig+0xa0>
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b8d      	ldr	r3, [pc, #564]	@ (8005668 <UART_SetConfig+0x2d0>)
 8005434:	429a      	cmp	r2, r3
 8005436:	d104      	bne.n	8005442 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005438:	f7fe fb0e 	bl	8003a58 <HAL_RCC_GetPCLK2Freq>
 800543c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005440:	e003      	b.n	800544a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005442:	f7fe faf5 	bl	8003a30 <HAL_RCC_GetPCLK1Freq>
 8005446:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005454:	f040 810c 	bne.w	8005670 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005462:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005466:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800546a:	4622      	mov	r2, r4
 800546c:	462b      	mov	r3, r5
 800546e:	1891      	adds	r1, r2, r2
 8005470:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005472:	415b      	adcs	r3, r3
 8005474:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005476:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800547a:	4621      	mov	r1, r4
 800547c:	eb12 0801 	adds.w	r8, r2, r1
 8005480:	4629      	mov	r1, r5
 8005482:	eb43 0901 	adc.w	r9, r3, r1
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	f04f 0300 	mov.w	r3, #0
 800548e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005492:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005496:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549a:	4690      	mov	r8, r2
 800549c:	4699      	mov	r9, r3
 800549e:	4623      	mov	r3, r4
 80054a0:	eb18 0303 	adds.w	r3, r8, r3
 80054a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054a8:	462b      	mov	r3, r5
 80054aa:	eb49 0303 	adc.w	r3, r9, r3
 80054ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054c6:	460b      	mov	r3, r1
 80054c8:	18db      	adds	r3, r3, r3
 80054ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80054cc:	4613      	mov	r3, r2
 80054ce:	eb42 0303 	adc.w	r3, r2, r3
 80054d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80054d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054dc:	f7fa fee0 	bl	80002a0 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4b61      	ldr	r3, [pc, #388]	@ (800566c <UART_SetConfig+0x2d4>)
 80054e6:	fba3 2302 	umull	r2, r3, r3, r2
 80054ea:	095b      	lsrs	r3, r3, #5
 80054ec:	011c      	lsls	r4, r3, #4
 80054ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	1891      	adds	r1, r2, r2
 8005506:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005508:	415b      	adcs	r3, r3
 800550a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005510:	4641      	mov	r1, r8
 8005512:	eb12 0a01 	adds.w	sl, r2, r1
 8005516:	4649      	mov	r1, r9
 8005518:	eb43 0b01 	adc.w	fp, r3, r1
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005528:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800552c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005530:	4692      	mov	sl, r2
 8005532:	469b      	mov	fp, r3
 8005534:	4643      	mov	r3, r8
 8005536:	eb1a 0303 	adds.w	r3, sl, r3
 800553a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800553e:	464b      	mov	r3, r9
 8005540:	eb4b 0303 	adc.w	r3, fp, r3
 8005544:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005554:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005558:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800555c:	460b      	mov	r3, r1
 800555e:	18db      	adds	r3, r3, r3
 8005560:	643b      	str	r3, [r7, #64]	@ 0x40
 8005562:	4613      	mov	r3, r2
 8005564:	eb42 0303 	adc.w	r3, r2, r3
 8005568:	647b      	str	r3, [r7, #68]	@ 0x44
 800556a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800556e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005572:	f7fa fe95 	bl	80002a0 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4611      	mov	r1, r2
 800557c:	4b3b      	ldr	r3, [pc, #236]	@ (800566c <UART_SetConfig+0x2d4>)
 800557e:	fba3 2301 	umull	r2, r3, r3, r1
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2264      	movs	r2, #100	@ 0x64
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005592:	4b36      	ldr	r3, [pc, #216]	@ (800566c <UART_SetConfig+0x2d4>)
 8005594:	fba3 2302 	umull	r2, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055a0:	441c      	add	r4, r3
 80055a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	1891      	adds	r1, r2, r2
 80055ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055bc:	415b      	adcs	r3, r3
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055c4:	4641      	mov	r1, r8
 80055c6:	1851      	adds	r1, r2, r1
 80055c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80055ca:	4649      	mov	r1, r9
 80055cc:	414b      	adcs	r3, r1
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055dc:	4659      	mov	r1, fp
 80055de:	00cb      	lsls	r3, r1, #3
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e6:	4651      	mov	r1, sl
 80055e8:	00ca      	lsls	r2, r1, #3
 80055ea:	4610      	mov	r0, r2
 80055ec:	4619      	mov	r1, r3
 80055ee:	4603      	mov	r3, r0
 80055f0:	4642      	mov	r2, r8
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f8:	464b      	mov	r3, r9
 80055fa:	460a      	mov	r2, r1
 80055fc:	eb42 0303 	adc.w	r3, r2, r3
 8005600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005610:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005614:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800562a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800562e:	f7fa fe37 	bl	80002a0 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <UART_SetConfig+0x2d4>)
 8005638:	fba3 1302 	umull	r1, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	2164      	movs	r1, #100	@ 0x64
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	3332      	adds	r3, #50	@ 0x32
 800564a:	4a08      	ldr	r2, [pc, #32]	@ (800566c <UART_SetConfig+0x2d4>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	f003 0207 	and.w	r2, r3, #7
 8005656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4422      	add	r2, r4
 800565e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005660:	e106      	b.n	8005870 <UART_SetConfig+0x4d8>
 8005662:	bf00      	nop
 8005664:	40011000 	.word	0x40011000
 8005668:	40011400 	.word	0x40011400
 800566c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800567a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800567e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005682:	4642      	mov	r2, r8
 8005684:	464b      	mov	r3, r9
 8005686:	1891      	adds	r1, r2, r2
 8005688:	6239      	str	r1, [r7, #32]
 800568a:	415b      	adcs	r3, r3
 800568c:	627b      	str	r3, [r7, #36]	@ 0x24
 800568e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005692:	4641      	mov	r1, r8
 8005694:	1854      	adds	r4, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb43 0501 	adc.w	r5, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	00eb      	lsls	r3, r5, #3
 80056a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056aa:	00e2      	lsls	r2, r4, #3
 80056ac:	4614      	mov	r4, r2
 80056ae:	461d      	mov	r5, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	18e3      	adds	r3, r4, r3
 80056b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056b8:	464b      	mov	r3, r9
 80056ba:	eb45 0303 	adc.w	r3, r5, r3
 80056be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056de:	4629      	mov	r1, r5
 80056e0:	008b      	lsls	r3, r1, #2
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056e8:	4621      	mov	r1, r4
 80056ea:	008a      	lsls	r2, r1, #2
 80056ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80056f0:	f7fa fdd6 	bl	80002a0 <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4b60      	ldr	r3, [pc, #384]	@ (800587c <UART_SetConfig+0x4e4>)
 80056fa:	fba3 2302 	umull	r2, r3, r3, r2
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	011c      	lsls	r4, r3, #4
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800570c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005710:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005714:	4642      	mov	r2, r8
 8005716:	464b      	mov	r3, r9
 8005718:	1891      	adds	r1, r2, r2
 800571a:	61b9      	str	r1, [r7, #24]
 800571c:	415b      	adcs	r3, r3
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005724:	4641      	mov	r1, r8
 8005726:	1851      	adds	r1, r2, r1
 8005728:	6139      	str	r1, [r7, #16]
 800572a:	4649      	mov	r1, r9
 800572c:	414b      	adcs	r3, r1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800573c:	4659      	mov	r1, fp
 800573e:	00cb      	lsls	r3, r1, #3
 8005740:	4651      	mov	r1, sl
 8005742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005746:	4651      	mov	r1, sl
 8005748:	00ca      	lsls	r2, r1, #3
 800574a:	4610      	mov	r0, r2
 800574c:	4619      	mov	r1, r3
 800574e:	4603      	mov	r3, r0
 8005750:	4642      	mov	r2, r8
 8005752:	189b      	adds	r3, r3, r2
 8005754:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005758:	464b      	mov	r3, r9
 800575a:	460a      	mov	r2, r1
 800575c:	eb42 0303 	adc.w	r3, r2, r3
 8005760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800576e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800577c:	4649      	mov	r1, r9
 800577e:	008b      	lsls	r3, r1, #2
 8005780:	4641      	mov	r1, r8
 8005782:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005786:	4641      	mov	r1, r8
 8005788:	008a      	lsls	r2, r1, #2
 800578a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800578e:	f7fa fd87 	bl	80002a0 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4611      	mov	r1, r2
 8005798:	4b38      	ldr	r3, [pc, #224]	@ (800587c <UART_SetConfig+0x4e4>)
 800579a:	fba3 2301 	umull	r2, r3, r3, r1
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	2264      	movs	r2, #100	@ 0x64
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	1acb      	subs	r3, r1, r3
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	3332      	adds	r3, #50	@ 0x32
 80057ac:	4a33      	ldr	r2, [pc, #204]	@ (800587c <UART_SetConfig+0x4e4>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057b8:	441c      	add	r4, r3
 80057ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057be:	2200      	movs	r2, #0
 80057c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80057c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80057c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	415b      	adcs	r3, r3
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057d8:	4641      	mov	r1, r8
 80057da:	1851      	adds	r1, r2, r1
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	4649      	mov	r1, r9
 80057e0:	414b      	adcs	r3, r1
 80057e2:	607b      	str	r3, [r7, #4]
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057f0:	4659      	mov	r1, fp
 80057f2:	00cb      	lsls	r3, r1, #3
 80057f4:	4651      	mov	r1, sl
 80057f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057fa:	4651      	mov	r1, sl
 80057fc:	00ca      	lsls	r2, r1, #3
 80057fe:	4610      	mov	r0, r2
 8005800:	4619      	mov	r1, r3
 8005802:	4603      	mov	r3, r0
 8005804:	4642      	mov	r2, r8
 8005806:	189b      	adds	r3, r3, r2
 8005808:	66bb      	str	r3, [r7, #104]	@ 0x68
 800580a:	464b      	mov	r3, r9
 800580c:	460a      	mov	r2, r1
 800580e:	eb42 0303 	adc.w	r3, r2, r3
 8005812:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	f04f 0300 	mov.w	r3, #0
 8005828:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800582c:	4649      	mov	r1, r9
 800582e:	008b      	lsls	r3, r1, #2
 8005830:	4641      	mov	r1, r8
 8005832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005836:	4641      	mov	r1, r8
 8005838:	008a      	lsls	r2, r1, #2
 800583a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800583e:	f7fa fd2f 	bl	80002a0 <__aeabi_uldivmod>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4b0d      	ldr	r3, [pc, #52]	@ (800587c <UART_SetConfig+0x4e4>)
 8005848:	fba3 1302 	umull	r1, r3, r3, r2
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	2164      	movs	r1, #100	@ 0x64
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	3332      	adds	r3, #50	@ 0x32
 800585a:	4a08      	ldr	r2, [pc, #32]	@ (800587c <UART_SetConfig+0x4e4>)
 800585c:	fba2 2303 	umull	r2, r3, r2, r3
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	f003 020f 	and.w	r2, r3, #15
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4422      	add	r2, r4
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005876:	46bd      	mov	sp, r7
 8005878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800587c:	51eb851f 	.word	0x51eb851f

08005880 <std>:
 8005880:	2300      	movs	r3, #0
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	e9c0 3300 	strd	r3, r3, [r0]
 800588a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800588e:	6083      	str	r3, [r0, #8]
 8005890:	8181      	strh	r1, [r0, #12]
 8005892:	6643      	str	r3, [r0, #100]	@ 0x64
 8005894:	81c2      	strh	r2, [r0, #14]
 8005896:	6183      	str	r3, [r0, #24]
 8005898:	4619      	mov	r1, r3
 800589a:	2208      	movs	r2, #8
 800589c:	305c      	adds	r0, #92	@ 0x5c
 800589e:	f000 fa19 	bl	8005cd4 <memset>
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <std+0x58>)
 80058a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80058a6:	4b0d      	ldr	r3, [pc, #52]	@ (80058dc <std+0x5c>)
 80058a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <std+0x60>)
 80058ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <std+0x64>)
 80058b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <std+0x68>)
 80058b4:	6224      	str	r4, [r4, #32]
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d006      	beq.n	80058c8 <std+0x48>
 80058ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058be:	4294      	cmp	r4, r2
 80058c0:	d002      	beq.n	80058c8 <std+0x48>
 80058c2:	33d0      	adds	r3, #208	@ 0xd0
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d105      	bne.n	80058d4 <std+0x54>
 80058c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f000 ba78 	b.w	8005dc4 <__retarget_lock_init_recursive>
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	bf00      	nop
 80058d8:	08005b25 	.word	0x08005b25
 80058dc:	08005b47 	.word	0x08005b47
 80058e0:	08005b7f 	.word	0x08005b7f
 80058e4:	08005ba3 	.word	0x08005ba3
 80058e8:	20000334 	.word	0x20000334

080058ec <stdio_exit_handler>:
 80058ec:	4a02      	ldr	r2, [pc, #8]	@ (80058f8 <stdio_exit_handler+0xc>)
 80058ee:	4903      	ldr	r1, [pc, #12]	@ (80058fc <stdio_exit_handler+0x10>)
 80058f0:	4803      	ldr	r0, [pc, #12]	@ (8005900 <stdio_exit_handler+0x14>)
 80058f2:	f000 b869 	b.w	80059c8 <_fwalk_sglue>
 80058f6:	bf00      	nop
 80058f8:	20000078 	.word	0x20000078
 80058fc:	08006925 	.word	0x08006925
 8005900:	20000088 	.word	0x20000088

08005904 <cleanup_stdio>:
 8005904:	6841      	ldr	r1, [r0, #4]
 8005906:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <cleanup_stdio+0x34>)
 8005908:	4299      	cmp	r1, r3
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
 800590e:	d001      	beq.n	8005914 <cleanup_stdio+0x10>
 8005910:	f001 f808 	bl	8006924 <_fflush_r>
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <cleanup_stdio+0x38>)
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <cleanup_stdio+0x1e>
 800591c:	4620      	mov	r0, r4
 800591e:	f001 f801 	bl	8006924 <_fflush_r>
 8005922:	68e1      	ldr	r1, [r4, #12]
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <cleanup_stdio+0x3c>)
 8005926:	4299      	cmp	r1, r3
 8005928:	d004      	beq.n	8005934 <cleanup_stdio+0x30>
 800592a:	4620      	mov	r0, r4
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	f000 bff8 	b.w	8006924 <_fflush_r>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	bf00      	nop
 8005938:	20000334 	.word	0x20000334
 800593c:	2000039c 	.word	0x2000039c
 8005940:	20000404 	.word	0x20000404

08005944 <global_stdio_init.part.0>:
 8005944:	b510      	push	{r4, lr}
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <global_stdio_init.part.0+0x30>)
 8005948:	4c0b      	ldr	r4, [pc, #44]	@ (8005978 <global_stdio_init.part.0+0x34>)
 800594a:	4a0c      	ldr	r2, [pc, #48]	@ (800597c <global_stdio_init.part.0+0x38>)
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	4620      	mov	r0, r4
 8005950:	2200      	movs	r2, #0
 8005952:	2104      	movs	r1, #4
 8005954:	f7ff ff94 	bl	8005880 <std>
 8005958:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800595c:	2201      	movs	r2, #1
 800595e:	2109      	movs	r1, #9
 8005960:	f7ff ff8e 	bl	8005880 <std>
 8005964:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005968:	2202      	movs	r2, #2
 800596a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800596e:	2112      	movs	r1, #18
 8005970:	f7ff bf86 	b.w	8005880 <std>
 8005974:	2000046c 	.word	0x2000046c
 8005978:	20000334 	.word	0x20000334
 800597c:	080058ed 	.word	0x080058ed

08005980 <__sfp_lock_acquire>:
 8005980:	4801      	ldr	r0, [pc, #4]	@ (8005988 <__sfp_lock_acquire+0x8>)
 8005982:	f000 ba20 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	20000475 	.word	0x20000475

0800598c <__sfp_lock_release>:
 800598c:	4801      	ldr	r0, [pc, #4]	@ (8005994 <__sfp_lock_release+0x8>)
 800598e:	f000 ba1b 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	20000475 	.word	0x20000475

08005998 <__sinit>:
 8005998:	b510      	push	{r4, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	f7ff fff0 	bl	8005980 <__sfp_lock_acquire>
 80059a0:	6a23      	ldr	r3, [r4, #32]
 80059a2:	b11b      	cbz	r3, 80059ac <__sinit+0x14>
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a8:	f7ff bff0 	b.w	800598c <__sfp_lock_release>
 80059ac:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <__sinit+0x28>)
 80059ae:	6223      	str	r3, [r4, #32]
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <__sinit+0x2c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f5      	bne.n	80059a4 <__sinit+0xc>
 80059b8:	f7ff ffc4 	bl	8005944 <global_stdio_init.part.0>
 80059bc:	e7f2      	b.n	80059a4 <__sinit+0xc>
 80059be:	bf00      	nop
 80059c0:	08005905 	.word	0x08005905
 80059c4:	2000046c 	.word	0x2000046c

080059c8 <_fwalk_sglue>:
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4607      	mov	r7, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	4614      	mov	r4, r2
 80059d2:	2600      	movs	r6, #0
 80059d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059d8:	f1b9 0901 	subs.w	r9, r9, #1
 80059dc:	d505      	bpl.n	80059ea <_fwalk_sglue+0x22>
 80059de:	6824      	ldr	r4, [r4, #0]
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d1f7      	bne.n	80059d4 <_fwalk_sglue+0xc>
 80059e4:	4630      	mov	r0, r6
 80059e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d907      	bls.n	8005a00 <_fwalk_sglue+0x38>
 80059f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f4:	3301      	adds	r3, #1
 80059f6:	d003      	beq.n	8005a00 <_fwalk_sglue+0x38>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	4306      	orrs	r6, r0
 8005a00:	3568      	adds	r5, #104	@ 0x68
 8005a02:	e7e9      	b.n	80059d8 <_fwalk_sglue+0x10>

08005a04 <iprintf>:
 8005a04:	b40f      	push	{r0, r1, r2, r3}
 8005a06:	b507      	push	{r0, r1, r2, lr}
 8005a08:	4906      	ldr	r1, [pc, #24]	@ (8005a24 <iprintf+0x20>)
 8005a0a:	ab04      	add	r3, sp, #16
 8005a0c:	6808      	ldr	r0, [r1, #0]
 8005a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a12:	6881      	ldr	r1, [r0, #8]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	f000 fc5b 	bl	80062d0 <_vfiprintf_r>
 8005a1a:	b003      	add	sp, #12
 8005a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a20:	b004      	add	sp, #16
 8005a22:	4770      	bx	lr
 8005a24:	20000084 	.word	0x20000084

08005a28 <_puts_r>:
 8005a28:	6a03      	ldr	r3, [r0, #32]
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	6884      	ldr	r4, [r0, #8]
 8005a2e:	4605      	mov	r5, r0
 8005a30:	460e      	mov	r6, r1
 8005a32:	b90b      	cbnz	r3, 8005a38 <_puts_r+0x10>
 8005a34:	f7ff ffb0 	bl	8005998 <__sinit>
 8005a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a3a:	07db      	lsls	r3, r3, #31
 8005a3c:	d405      	bmi.n	8005a4a <_puts_r+0x22>
 8005a3e:	89a3      	ldrh	r3, [r4, #12]
 8005a40:	0598      	lsls	r0, r3, #22
 8005a42:	d402      	bmi.n	8005a4a <_puts_r+0x22>
 8005a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a46:	f000 f9be 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 8005a4a:	89a3      	ldrh	r3, [r4, #12]
 8005a4c:	0719      	lsls	r1, r3, #28
 8005a4e:	d502      	bpl.n	8005a56 <_puts_r+0x2e>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d135      	bne.n	8005ac2 <_puts_r+0x9a>
 8005a56:	4621      	mov	r1, r4
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f000 f8e5 	bl	8005c28 <__swsetup_r>
 8005a5e:	b380      	cbz	r0, 8005ac2 <_puts_r+0x9a>
 8005a60:	f04f 35ff 	mov.w	r5, #4294967295
 8005a64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d405      	bmi.n	8005a76 <_puts_r+0x4e>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	059b      	lsls	r3, r3, #22
 8005a6e:	d402      	bmi.n	8005a76 <_puts_r+0x4e>
 8005a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a72:	f000 f9a9 	bl	8005dc8 <__retarget_lock_release_recursive>
 8005a76:	4628      	mov	r0, r5
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da04      	bge.n	8005a88 <_puts_r+0x60>
 8005a7e:	69a2      	ldr	r2, [r4, #24]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	dc17      	bgt.n	8005ab4 <_puts_r+0x8c>
 8005a84:	290a      	cmp	r1, #10
 8005a86:	d015      	beq.n	8005ab4 <_puts_r+0x8c>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	6022      	str	r2, [r4, #0]
 8005a8e:	7019      	strb	r1, [r3, #0]
 8005a90:	68a3      	ldr	r3, [r4, #8]
 8005a92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a96:	3b01      	subs	r3, #1
 8005a98:	60a3      	str	r3, [r4, #8]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d1ed      	bne.n	8005a7a <_puts_r+0x52>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	da11      	bge.n	8005ac6 <_puts_r+0x9e>
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	210a      	movs	r1, #10
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f000 f87f 	bl	8005baa <__swbuf_r>
 8005aac:	3001      	adds	r0, #1
 8005aae:	d0d7      	beq.n	8005a60 <_puts_r+0x38>
 8005ab0:	250a      	movs	r5, #10
 8005ab2:	e7d7      	b.n	8005a64 <_puts_r+0x3c>
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f877 	bl	8005baa <__swbuf_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d1e7      	bne.n	8005a90 <_puts_r+0x68>
 8005ac0:	e7ce      	b.n	8005a60 <_puts_r+0x38>
 8005ac2:	3e01      	subs	r6, #1
 8005ac4:	e7e4      	b.n	8005a90 <_puts_r+0x68>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	220a      	movs	r2, #10
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e7ee      	b.n	8005ab0 <_puts_r+0x88>
	...

08005ad4 <puts>:
 8005ad4:	4b02      	ldr	r3, [pc, #8]	@ (8005ae0 <puts+0xc>)
 8005ad6:	4601      	mov	r1, r0
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	f7ff bfa5 	b.w	8005a28 <_puts_r>
 8005ade:	bf00      	nop
 8005ae0:	20000084 	.word	0x20000084

08005ae4 <siprintf>:
 8005ae4:	b40e      	push	{r1, r2, r3}
 8005ae6:	b500      	push	{lr}
 8005ae8:	b09c      	sub	sp, #112	@ 0x70
 8005aea:	ab1d      	add	r3, sp, #116	@ 0x74
 8005aec:	9002      	str	r0, [sp, #8]
 8005aee:	9006      	str	r0, [sp, #24]
 8005af0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005af4:	4809      	ldr	r0, [pc, #36]	@ (8005b1c <siprintf+0x38>)
 8005af6:	9107      	str	r1, [sp, #28]
 8005af8:	9104      	str	r1, [sp, #16]
 8005afa:	4909      	ldr	r1, [pc, #36]	@ (8005b20 <siprintf+0x3c>)
 8005afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b00:	9105      	str	r1, [sp, #20]
 8005b02:	6800      	ldr	r0, [r0, #0]
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	a902      	add	r1, sp, #8
 8005b08:	f000 fabc 	bl	8006084 <_svfiprintf_r>
 8005b0c:	9b02      	ldr	r3, [sp, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
 8005b12:	b01c      	add	sp, #112	@ 0x70
 8005b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b18:	b003      	add	sp, #12
 8005b1a:	4770      	bx	lr
 8005b1c:	20000084 	.word	0x20000084
 8005b20:	ffff0208 	.word	0xffff0208

08005b24 <__sread>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	460c      	mov	r4, r1
 8005b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b2c:	f000 f8fc 	bl	8005d28 <_read_r>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	bfab      	itete	ge
 8005b34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b36:	89a3      	ldrhlt	r3, [r4, #12]
 8005b38:	181b      	addge	r3, r3, r0
 8005b3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b3e:	bfac      	ite	ge
 8005b40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b42:	81a3      	strhlt	r3, [r4, #12]
 8005b44:	bd10      	pop	{r4, pc}

08005b46 <__swrite>:
 8005b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b4a:	461f      	mov	r7, r3
 8005b4c:	898b      	ldrh	r3, [r1, #12]
 8005b4e:	05db      	lsls	r3, r3, #23
 8005b50:	4605      	mov	r5, r0
 8005b52:	460c      	mov	r4, r1
 8005b54:	4616      	mov	r6, r2
 8005b56:	d505      	bpl.n	8005b64 <__swrite+0x1e>
 8005b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f000 f8d0 	bl	8005d04 <_lseek_r>
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	4632      	mov	r2, r6
 8005b72:	463b      	mov	r3, r7
 8005b74:	4628      	mov	r0, r5
 8005b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7a:	f000 b8e7 	b.w	8005d4c <_write_r>

08005b7e <__sseek>:
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	460c      	mov	r4, r1
 8005b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b86:	f000 f8bd 	bl	8005d04 <_lseek_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	bf15      	itete	ne
 8005b90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b9a:	81a3      	strheq	r3, [r4, #12]
 8005b9c:	bf18      	it	ne
 8005b9e:	81a3      	strhne	r3, [r4, #12]
 8005ba0:	bd10      	pop	{r4, pc}

08005ba2 <__sclose>:
 8005ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba6:	f000 b89d 	b.w	8005ce4 <_close_r>

08005baa <__swbuf_r>:
 8005baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bac:	460e      	mov	r6, r1
 8005bae:	4614      	mov	r4, r2
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	b118      	cbz	r0, 8005bbc <__swbuf_r+0x12>
 8005bb4:	6a03      	ldr	r3, [r0, #32]
 8005bb6:	b90b      	cbnz	r3, 8005bbc <__swbuf_r+0x12>
 8005bb8:	f7ff feee 	bl	8005998 <__sinit>
 8005bbc:	69a3      	ldr	r3, [r4, #24]
 8005bbe:	60a3      	str	r3, [r4, #8]
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	071a      	lsls	r2, r3, #28
 8005bc4:	d501      	bpl.n	8005bca <__swbuf_r+0x20>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	b943      	cbnz	r3, 8005bdc <__swbuf_r+0x32>
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f82b 	bl	8005c28 <__swsetup_r>
 8005bd2:	b118      	cbz	r0, 8005bdc <__swbuf_r+0x32>
 8005bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8005bd8:	4638      	mov	r0, r7
 8005bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	6922      	ldr	r2, [r4, #16]
 8005be0:	1a98      	subs	r0, r3, r2
 8005be2:	6963      	ldr	r3, [r4, #20]
 8005be4:	b2f6      	uxtb	r6, r6
 8005be6:	4283      	cmp	r3, r0
 8005be8:	4637      	mov	r7, r6
 8005bea:	dc05      	bgt.n	8005bf8 <__swbuf_r+0x4e>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 fe98 	bl	8006924 <_fflush_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d1ed      	bne.n	8005bd4 <__swbuf_r+0x2a>
 8005bf8:	68a3      	ldr	r3, [r4, #8]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	60a3      	str	r3, [r4, #8]
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	701e      	strb	r6, [r3, #0]
 8005c06:	6962      	ldr	r2, [r4, #20]
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d004      	beq.n	8005c18 <__swbuf_r+0x6e>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	07db      	lsls	r3, r3, #31
 8005c12:	d5e1      	bpl.n	8005bd8 <__swbuf_r+0x2e>
 8005c14:	2e0a      	cmp	r6, #10
 8005c16:	d1df      	bne.n	8005bd8 <__swbuf_r+0x2e>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fe82 	bl	8006924 <_fflush_r>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d0d9      	beq.n	8005bd8 <__swbuf_r+0x2e>
 8005c24:	e7d6      	b.n	8005bd4 <__swbuf_r+0x2a>
	...

08005c28 <__swsetup_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4b29      	ldr	r3, [pc, #164]	@ (8005cd0 <__swsetup_r+0xa8>)
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	460c      	mov	r4, r1
 8005c32:	b118      	cbz	r0, 8005c3c <__swsetup_r+0x14>
 8005c34:	6a03      	ldr	r3, [r0, #32]
 8005c36:	b90b      	cbnz	r3, 8005c3c <__swsetup_r+0x14>
 8005c38:	f7ff feae 	bl	8005998 <__sinit>
 8005c3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c40:	0719      	lsls	r1, r3, #28
 8005c42:	d422      	bmi.n	8005c8a <__swsetup_r+0x62>
 8005c44:	06da      	lsls	r2, r3, #27
 8005c46:	d407      	bmi.n	8005c58 <__swsetup_r+0x30>
 8005c48:	2209      	movs	r2, #9
 8005c4a:	602a      	str	r2, [r5, #0]
 8005c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	e033      	b.n	8005cc0 <__swsetup_r+0x98>
 8005c58:	0758      	lsls	r0, r3, #29
 8005c5a:	d512      	bpl.n	8005c82 <__swsetup_r+0x5a>
 8005c5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c5e:	b141      	cbz	r1, 8005c72 <__swsetup_r+0x4a>
 8005c60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c64:	4299      	cmp	r1, r3
 8005c66:	d002      	beq.n	8005c6e <__swsetup_r+0x46>
 8005c68:	4628      	mov	r0, r5
 8005c6a:	f000 f8b7 	bl	8005ddc <_free_r>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6063      	str	r3, [r4, #4]
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	89a3      	ldrh	r3, [r4, #12]
 8005c84:	f043 0308 	orr.w	r3, r3, #8
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	b94b      	cbnz	r3, 8005ca2 <__swsetup_r+0x7a>
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c98:	d003      	beq.n	8005ca2 <__swsetup_r+0x7a>
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f000 fe8f 	bl	80069c0 <__smakebuf_r>
 8005ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca6:	f013 0201 	ands.w	r2, r3, #1
 8005caa:	d00a      	beq.n	8005cc2 <__swsetup_r+0x9a>
 8005cac:	2200      	movs	r2, #0
 8005cae:	60a2      	str	r2, [r4, #8]
 8005cb0:	6962      	ldr	r2, [r4, #20]
 8005cb2:	4252      	negs	r2, r2
 8005cb4:	61a2      	str	r2, [r4, #24]
 8005cb6:	6922      	ldr	r2, [r4, #16]
 8005cb8:	b942      	cbnz	r2, 8005ccc <__swsetup_r+0xa4>
 8005cba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cbe:	d1c5      	bne.n	8005c4c <__swsetup_r+0x24>
 8005cc0:	bd38      	pop	{r3, r4, r5, pc}
 8005cc2:	0799      	lsls	r1, r3, #30
 8005cc4:	bf58      	it	pl
 8005cc6:	6962      	ldrpl	r2, [r4, #20]
 8005cc8:	60a2      	str	r2, [r4, #8]
 8005cca:	e7f4      	b.n	8005cb6 <__swsetup_r+0x8e>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e7f7      	b.n	8005cc0 <__swsetup_r+0x98>
 8005cd0:	20000084 	.word	0x20000084

08005cd4 <memset>:
 8005cd4:	4402      	add	r2, r0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d100      	bne.n	8005cde <memset+0xa>
 8005cdc:	4770      	bx	lr
 8005cde:	f803 1b01 	strb.w	r1, [r3], #1
 8005ce2:	e7f9      	b.n	8005cd8 <memset+0x4>

08005ce4 <_close_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d06      	ldr	r5, [pc, #24]	@ (8005d00 <_close_r+0x1c>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	602b      	str	r3, [r5, #0]
 8005cf0:	f7fb ff3f 	bl	8001b72 <_close>
 8005cf4:	1c43      	adds	r3, r0, #1
 8005cf6:	d102      	bne.n	8005cfe <_close_r+0x1a>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	b103      	cbz	r3, 8005cfe <_close_r+0x1a>
 8005cfc:	6023      	str	r3, [r4, #0]
 8005cfe:	bd38      	pop	{r3, r4, r5, pc}
 8005d00:	20000470 	.word	0x20000470

08005d04 <_lseek_r>:
 8005d04:	b538      	push	{r3, r4, r5, lr}
 8005d06:	4d07      	ldr	r5, [pc, #28]	@ (8005d24 <_lseek_r+0x20>)
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4608      	mov	r0, r1
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	602a      	str	r2, [r5, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7fb ff54 	bl	8001bc0 <_lseek>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d102      	bne.n	8005d22 <_lseek_r+0x1e>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	b103      	cbz	r3, 8005d22 <_lseek_r+0x1e>
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	bd38      	pop	{r3, r4, r5, pc}
 8005d24:	20000470 	.word	0x20000470

08005d28 <_read_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	@ (8005d48 <_read_r+0x20>)
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4608      	mov	r0, r1
 8005d30:	4611      	mov	r1, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f7fb fee2 	bl	8001b00 <_read>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_read_r+0x1e>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_read_r+0x1e>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	20000470 	.word	0x20000470

08005d4c <_write_r>:
 8005d4c:	b538      	push	{r3, r4, r5, lr}
 8005d4e:	4d07      	ldr	r5, [pc, #28]	@ (8005d6c <_write_r+0x20>)
 8005d50:	4604      	mov	r4, r0
 8005d52:	4608      	mov	r0, r1
 8005d54:	4611      	mov	r1, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	602a      	str	r2, [r5, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f7fb feed 	bl	8001b3a <_write>
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	d102      	bne.n	8005d6a <_write_r+0x1e>
 8005d64:	682b      	ldr	r3, [r5, #0]
 8005d66:	b103      	cbz	r3, 8005d6a <_write_r+0x1e>
 8005d68:	6023      	str	r3, [r4, #0]
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	20000470 	.word	0x20000470

08005d70 <__errno>:
 8005d70:	4b01      	ldr	r3, [pc, #4]	@ (8005d78 <__errno+0x8>)
 8005d72:	6818      	ldr	r0, [r3, #0]
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000084 	.word	0x20000084

08005d7c <__libc_init_array>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005db4 <__libc_init_array+0x38>)
 8005d80:	4c0d      	ldr	r4, [pc, #52]	@ (8005db8 <__libc_init_array+0x3c>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	2600      	movs	r6, #0
 8005d88:	42a6      	cmp	r6, r4
 8005d8a:	d109      	bne.n	8005da0 <__libc_init_array+0x24>
 8005d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005dbc <__libc_init_array+0x40>)
 8005d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc0 <__libc_init_array+0x44>)
 8005d90:	f000 fee2 	bl	8006b58 <_init>
 8005d94:	1b64      	subs	r4, r4, r5
 8005d96:	10a4      	asrs	r4, r4, #2
 8005d98:	2600      	movs	r6, #0
 8005d9a:	42a6      	cmp	r6, r4
 8005d9c:	d105      	bne.n	8005daa <__libc_init_array+0x2e>
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da4:	4798      	blx	r3
 8005da6:	3601      	adds	r6, #1
 8005da8:	e7ee      	b.n	8005d88 <__libc_init_array+0xc>
 8005daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dae:	4798      	blx	r3
 8005db0:	3601      	adds	r6, #1
 8005db2:	e7f2      	b.n	8005d9a <__libc_init_array+0x1e>
 8005db4:	08006c7c 	.word	0x08006c7c
 8005db8:	08006c7c 	.word	0x08006c7c
 8005dbc:	08006c7c 	.word	0x08006c7c
 8005dc0:	08006c80 	.word	0x08006c80

08005dc4 <__retarget_lock_init_recursive>:
 8005dc4:	4770      	bx	lr

08005dc6 <__retarget_lock_acquire_recursive>:
 8005dc6:	4770      	bx	lr

08005dc8 <__retarget_lock_release_recursive>:
 8005dc8:	4770      	bx	lr

08005dca <strcpy>:
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dd0:	f803 2b01 	strb.w	r2, [r3], #1
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d1f9      	bne.n	8005dcc <strcpy+0x2>
 8005dd8:	4770      	bx	lr
	...

08005ddc <_free_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4605      	mov	r5, r0
 8005de0:	2900      	cmp	r1, #0
 8005de2:	d041      	beq.n	8005e68 <_free_r+0x8c>
 8005de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de8:	1f0c      	subs	r4, r1, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bfb8      	it	lt
 8005dee:	18e4      	addlt	r4, r4, r3
 8005df0:	f000 f8e0 	bl	8005fb4 <__malloc_lock>
 8005df4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <_free_r+0x90>)
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	b933      	cbnz	r3, 8005e08 <_free_r+0x2c>
 8005dfa:	6063      	str	r3, [r4, #4]
 8005dfc:	6014      	str	r4, [r2, #0]
 8005dfe:	4628      	mov	r0, r5
 8005e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e04:	f000 b8dc 	b.w	8005fc0 <__malloc_unlock>
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d908      	bls.n	8005e1e <_free_r+0x42>
 8005e0c:	6820      	ldr	r0, [r4, #0]
 8005e0e:	1821      	adds	r1, r4, r0
 8005e10:	428b      	cmp	r3, r1
 8005e12:	bf01      	itttt	eq
 8005e14:	6819      	ldreq	r1, [r3, #0]
 8005e16:	685b      	ldreq	r3, [r3, #4]
 8005e18:	1809      	addeq	r1, r1, r0
 8005e1a:	6021      	streq	r1, [r4, #0]
 8005e1c:	e7ed      	b.n	8005dfa <_free_r+0x1e>
 8005e1e:	461a      	mov	r2, r3
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b10b      	cbz	r3, 8005e28 <_free_r+0x4c>
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d9fa      	bls.n	8005e1e <_free_r+0x42>
 8005e28:	6811      	ldr	r1, [r2, #0]
 8005e2a:	1850      	adds	r0, r2, r1
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	d10b      	bne.n	8005e48 <_free_r+0x6c>
 8005e30:	6820      	ldr	r0, [r4, #0]
 8005e32:	4401      	add	r1, r0
 8005e34:	1850      	adds	r0, r2, r1
 8005e36:	4283      	cmp	r3, r0
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	d1e0      	bne.n	8005dfe <_free_r+0x22>
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	6053      	str	r3, [r2, #4]
 8005e42:	4408      	add	r0, r1
 8005e44:	6010      	str	r0, [r2, #0]
 8005e46:	e7da      	b.n	8005dfe <_free_r+0x22>
 8005e48:	d902      	bls.n	8005e50 <_free_r+0x74>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	e7d6      	b.n	8005dfe <_free_r+0x22>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	1821      	adds	r1, r4, r0
 8005e54:	428b      	cmp	r3, r1
 8005e56:	bf04      	itt	eq
 8005e58:	6819      	ldreq	r1, [r3, #0]
 8005e5a:	685b      	ldreq	r3, [r3, #4]
 8005e5c:	6063      	str	r3, [r4, #4]
 8005e5e:	bf04      	itt	eq
 8005e60:	1809      	addeq	r1, r1, r0
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	6054      	str	r4, [r2, #4]
 8005e66:	e7ca      	b.n	8005dfe <_free_r+0x22>
 8005e68:	bd38      	pop	{r3, r4, r5, pc}
 8005e6a:	bf00      	nop
 8005e6c:	2000047c 	.word	0x2000047c

08005e70 <sbrk_aligned>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	4e0f      	ldr	r6, [pc, #60]	@ (8005eb0 <sbrk_aligned+0x40>)
 8005e74:	460c      	mov	r4, r1
 8005e76:	6831      	ldr	r1, [r6, #0]
 8005e78:	4605      	mov	r5, r0
 8005e7a:	b911      	cbnz	r1, 8005e82 <sbrk_aligned+0x12>
 8005e7c:	f000 fe18 	bl	8006ab0 <_sbrk_r>
 8005e80:	6030      	str	r0, [r6, #0]
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 fe13 	bl	8006ab0 <_sbrk_r>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d103      	bne.n	8005e96 <sbrk_aligned+0x26>
 8005e8e:	f04f 34ff 	mov.w	r4, #4294967295
 8005e92:	4620      	mov	r0, r4
 8005e94:	bd70      	pop	{r4, r5, r6, pc}
 8005e96:	1cc4      	adds	r4, r0, #3
 8005e98:	f024 0403 	bic.w	r4, r4, #3
 8005e9c:	42a0      	cmp	r0, r4
 8005e9e:	d0f8      	beq.n	8005e92 <sbrk_aligned+0x22>
 8005ea0:	1a21      	subs	r1, r4, r0
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fe04 	bl	8006ab0 <_sbrk_r>
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d1f2      	bne.n	8005e92 <sbrk_aligned+0x22>
 8005eac:	e7ef      	b.n	8005e8e <sbrk_aligned+0x1e>
 8005eae:	bf00      	nop
 8005eb0:	20000478 	.word	0x20000478

08005eb4 <_malloc_r>:
 8005eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	1ccd      	adds	r5, r1, #3
 8005eba:	f025 0503 	bic.w	r5, r5, #3
 8005ebe:	3508      	adds	r5, #8
 8005ec0:	2d0c      	cmp	r5, #12
 8005ec2:	bf38      	it	cc
 8005ec4:	250c      	movcc	r5, #12
 8005ec6:	2d00      	cmp	r5, #0
 8005ec8:	4606      	mov	r6, r0
 8005eca:	db01      	blt.n	8005ed0 <_malloc_r+0x1c>
 8005ecc:	42a9      	cmp	r1, r5
 8005ece:	d904      	bls.n	8005eda <_malloc_r+0x26>
 8005ed0:	230c      	movs	r3, #12
 8005ed2:	6033      	str	r3, [r6, #0]
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fb0 <_malloc_r+0xfc>
 8005ede:	f000 f869 	bl	8005fb4 <__malloc_lock>
 8005ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee6:	461c      	mov	r4, r3
 8005ee8:	bb44      	cbnz	r4, 8005f3c <_malloc_r+0x88>
 8005eea:	4629      	mov	r1, r5
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff ffbf 	bl	8005e70 <sbrk_aligned>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	d158      	bne.n	8005faa <_malloc_r+0xf6>
 8005ef8:	f8d8 4000 	ldr.w	r4, [r8]
 8005efc:	4627      	mov	r7, r4
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	d143      	bne.n	8005f8a <_malloc_r+0xd6>
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	d04b      	beq.n	8005f9e <_malloc_r+0xea>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	4639      	mov	r1, r7
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	eb04 0903 	add.w	r9, r4, r3
 8005f10:	f000 fdce 	bl	8006ab0 <_sbrk_r>
 8005f14:	4581      	cmp	r9, r0
 8005f16:	d142      	bne.n	8005f9e <_malloc_r+0xea>
 8005f18:	6821      	ldr	r1, [r4, #0]
 8005f1a:	1a6d      	subs	r5, r5, r1
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f7ff ffa6 	bl	8005e70 <sbrk_aligned>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d03a      	beq.n	8005f9e <_malloc_r+0xea>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	442b      	add	r3, r5
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	bb62      	cbnz	r2, 8005f90 <_malloc_r+0xdc>
 8005f36:	f8c8 7000 	str.w	r7, [r8]
 8005f3a:	e00f      	b.n	8005f5c <_malloc_r+0xa8>
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	1b52      	subs	r2, r2, r5
 8005f40:	d420      	bmi.n	8005f84 <_malloc_r+0xd0>
 8005f42:	2a0b      	cmp	r2, #11
 8005f44:	d917      	bls.n	8005f76 <_malloc_r+0xc2>
 8005f46:	1961      	adds	r1, r4, r5
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	6025      	str	r5, [r4, #0]
 8005f4c:	bf18      	it	ne
 8005f4e:	6059      	strne	r1, [r3, #4]
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	bf08      	it	eq
 8005f54:	f8c8 1000 	streq.w	r1, [r8]
 8005f58:	5162      	str	r2, [r4, r5]
 8005f5a:	604b      	str	r3, [r1, #4]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f000 f82f 	bl	8005fc0 <__malloc_unlock>
 8005f62:	f104 000b 	add.w	r0, r4, #11
 8005f66:	1d23      	adds	r3, r4, #4
 8005f68:	f020 0007 	bic.w	r0, r0, #7
 8005f6c:	1ac2      	subs	r2, r0, r3
 8005f6e:	bf1c      	itt	ne
 8005f70:	1a1b      	subne	r3, r3, r0
 8005f72:	50a3      	strne	r3, [r4, r2]
 8005f74:	e7af      	b.n	8005ed6 <_malloc_r+0x22>
 8005f76:	6862      	ldr	r2, [r4, #4]
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	bf0c      	ite	eq
 8005f7c:	f8c8 2000 	streq.w	r2, [r8]
 8005f80:	605a      	strne	r2, [r3, #4]
 8005f82:	e7eb      	b.n	8005f5c <_malloc_r+0xa8>
 8005f84:	4623      	mov	r3, r4
 8005f86:	6864      	ldr	r4, [r4, #4]
 8005f88:	e7ae      	b.n	8005ee8 <_malloc_r+0x34>
 8005f8a:	463c      	mov	r4, r7
 8005f8c:	687f      	ldr	r7, [r7, #4]
 8005f8e:	e7b6      	b.n	8005efe <_malloc_r+0x4a>
 8005f90:	461a      	mov	r2, r3
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	42a3      	cmp	r3, r4
 8005f96:	d1fb      	bne.n	8005f90 <_malloc_r+0xdc>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6053      	str	r3, [r2, #4]
 8005f9c:	e7de      	b.n	8005f5c <_malloc_r+0xa8>
 8005f9e:	230c      	movs	r3, #12
 8005fa0:	6033      	str	r3, [r6, #0]
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f000 f80c 	bl	8005fc0 <__malloc_unlock>
 8005fa8:	e794      	b.n	8005ed4 <_malloc_r+0x20>
 8005faa:	6005      	str	r5, [r0, #0]
 8005fac:	e7d6      	b.n	8005f5c <_malloc_r+0xa8>
 8005fae:	bf00      	nop
 8005fb0:	2000047c 	.word	0x2000047c

08005fb4 <__malloc_lock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	@ (8005fbc <__malloc_lock+0x8>)
 8005fb6:	f7ff bf06 	b.w	8005dc6 <__retarget_lock_acquire_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000474 	.word	0x20000474

08005fc0 <__malloc_unlock>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	@ (8005fc8 <__malloc_unlock+0x8>)
 8005fc2:	f7ff bf01 	b.w	8005dc8 <__retarget_lock_release_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	20000474 	.word	0x20000474

08005fcc <__ssputs_r>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	688e      	ldr	r6, [r1, #8]
 8005fd2:	461f      	mov	r7, r3
 8005fd4:	42be      	cmp	r6, r7
 8005fd6:	680b      	ldr	r3, [r1, #0]
 8005fd8:	4682      	mov	sl, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	4690      	mov	r8, r2
 8005fde:	d82d      	bhi.n	800603c <__ssputs_r+0x70>
 8005fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fe8:	d026      	beq.n	8006038 <__ssputs_r+0x6c>
 8005fea:	6965      	ldr	r5, [r4, #20]
 8005fec:	6909      	ldr	r1, [r1, #16]
 8005fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ff2:	eba3 0901 	sub.w	r9, r3, r1
 8005ff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ffa:	1c7b      	adds	r3, r7, #1
 8005ffc:	444b      	add	r3, r9
 8005ffe:	106d      	asrs	r5, r5, #1
 8006000:	429d      	cmp	r5, r3
 8006002:	bf38      	it	cc
 8006004:	461d      	movcc	r5, r3
 8006006:	0553      	lsls	r3, r2, #21
 8006008:	d527      	bpl.n	800605a <__ssputs_r+0x8e>
 800600a:	4629      	mov	r1, r5
 800600c:	f7ff ff52 	bl	8005eb4 <_malloc_r>
 8006010:	4606      	mov	r6, r0
 8006012:	b360      	cbz	r0, 800606e <__ssputs_r+0xa2>
 8006014:	6921      	ldr	r1, [r4, #16]
 8006016:	464a      	mov	r2, r9
 8006018:	f000 fd5a 	bl	8006ad0 <memcpy>
 800601c:	89a3      	ldrh	r3, [r4, #12]
 800601e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	6126      	str	r6, [r4, #16]
 800602a:	6165      	str	r5, [r4, #20]
 800602c:	444e      	add	r6, r9
 800602e:	eba5 0509 	sub.w	r5, r5, r9
 8006032:	6026      	str	r6, [r4, #0]
 8006034:	60a5      	str	r5, [r4, #8]
 8006036:	463e      	mov	r6, r7
 8006038:	42be      	cmp	r6, r7
 800603a:	d900      	bls.n	800603e <__ssputs_r+0x72>
 800603c:	463e      	mov	r6, r7
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	4632      	mov	r2, r6
 8006042:	4641      	mov	r1, r8
 8006044:	f000 fcf8 	bl	8006a38 <memmove>
 8006048:	68a3      	ldr	r3, [r4, #8]
 800604a:	1b9b      	subs	r3, r3, r6
 800604c:	60a3      	str	r3, [r4, #8]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	4433      	add	r3, r6
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2000      	movs	r0, #0
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	462a      	mov	r2, r5
 800605c:	f000 fd46 	bl	8006aec <_realloc_r>
 8006060:	4606      	mov	r6, r0
 8006062:	2800      	cmp	r0, #0
 8006064:	d1e0      	bne.n	8006028 <__ssputs_r+0x5c>
 8006066:	6921      	ldr	r1, [r4, #16]
 8006068:	4650      	mov	r0, sl
 800606a:	f7ff feb7 	bl	8005ddc <_free_r>
 800606e:	230c      	movs	r3, #12
 8006070:	f8ca 3000 	str.w	r3, [sl]
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800607a:	81a3      	strh	r3, [r4, #12]
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e7e9      	b.n	8006056 <__ssputs_r+0x8a>
	...

08006084 <_svfiprintf_r>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	4698      	mov	r8, r3
 800608a:	898b      	ldrh	r3, [r1, #12]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	b09d      	sub	sp, #116	@ 0x74
 8006090:	4607      	mov	r7, r0
 8006092:	460d      	mov	r5, r1
 8006094:	4614      	mov	r4, r2
 8006096:	d510      	bpl.n	80060ba <_svfiprintf_r+0x36>
 8006098:	690b      	ldr	r3, [r1, #16]
 800609a:	b973      	cbnz	r3, 80060ba <_svfiprintf_r+0x36>
 800609c:	2140      	movs	r1, #64	@ 0x40
 800609e:	f7ff ff09 	bl	8005eb4 <_malloc_r>
 80060a2:	6028      	str	r0, [r5, #0]
 80060a4:	6128      	str	r0, [r5, #16]
 80060a6:	b930      	cbnz	r0, 80060b6 <_svfiprintf_r+0x32>
 80060a8:	230c      	movs	r3, #12
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	b01d      	add	sp, #116	@ 0x74
 80060b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b6:	2340      	movs	r3, #64	@ 0x40
 80060b8:	616b      	str	r3, [r5, #20]
 80060ba:	2300      	movs	r3, #0
 80060bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060be:	2320      	movs	r3, #32
 80060c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c8:	2330      	movs	r3, #48	@ 0x30
 80060ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006268 <_svfiprintf_r+0x1e4>
 80060ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060d2:	f04f 0901 	mov.w	r9, #1
 80060d6:	4623      	mov	r3, r4
 80060d8:	469a      	mov	sl, r3
 80060da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060de:	b10a      	cbz	r2, 80060e4 <_svfiprintf_r+0x60>
 80060e0:	2a25      	cmp	r2, #37	@ 0x25
 80060e2:	d1f9      	bne.n	80060d8 <_svfiprintf_r+0x54>
 80060e4:	ebba 0b04 	subs.w	fp, sl, r4
 80060e8:	d00b      	beq.n	8006102 <_svfiprintf_r+0x7e>
 80060ea:	465b      	mov	r3, fp
 80060ec:	4622      	mov	r2, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	4638      	mov	r0, r7
 80060f2:	f7ff ff6b 	bl	8005fcc <__ssputs_r>
 80060f6:	3001      	adds	r0, #1
 80060f8:	f000 80a7 	beq.w	800624a <_svfiprintf_r+0x1c6>
 80060fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060fe:	445a      	add	r2, fp
 8006100:	9209      	str	r2, [sp, #36]	@ 0x24
 8006102:	f89a 3000 	ldrb.w	r3, [sl]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 809f 	beq.w	800624a <_svfiprintf_r+0x1c6>
 800610c:	2300      	movs	r3, #0
 800610e:	f04f 32ff 	mov.w	r2, #4294967295
 8006112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006116:	f10a 0a01 	add.w	sl, sl, #1
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	9307      	str	r3, [sp, #28]
 800611e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006122:	931a      	str	r3, [sp, #104]	@ 0x68
 8006124:	4654      	mov	r4, sl
 8006126:	2205      	movs	r2, #5
 8006128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612c:	484e      	ldr	r0, [pc, #312]	@ (8006268 <_svfiprintf_r+0x1e4>)
 800612e:	f7fa f867 	bl	8000200 <memchr>
 8006132:	9a04      	ldr	r2, [sp, #16]
 8006134:	b9d8      	cbnz	r0, 800616e <_svfiprintf_r+0xea>
 8006136:	06d0      	lsls	r0, r2, #27
 8006138:	bf44      	itt	mi
 800613a:	2320      	movmi	r3, #32
 800613c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006140:	0711      	lsls	r1, r2, #28
 8006142:	bf44      	itt	mi
 8006144:	232b      	movmi	r3, #43	@ 0x2b
 8006146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800614a:	f89a 3000 	ldrb.w	r3, [sl]
 800614e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006150:	d015      	beq.n	800617e <_svfiprintf_r+0xfa>
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	4654      	mov	r4, sl
 8006156:	2000      	movs	r0, #0
 8006158:	f04f 0c0a 	mov.w	ip, #10
 800615c:	4621      	mov	r1, r4
 800615e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006162:	3b30      	subs	r3, #48	@ 0x30
 8006164:	2b09      	cmp	r3, #9
 8006166:	d94b      	bls.n	8006200 <_svfiprintf_r+0x17c>
 8006168:	b1b0      	cbz	r0, 8006198 <_svfiprintf_r+0x114>
 800616a:	9207      	str	r2, [sp, #28]
 800616c:	e014      	b.n	8006198 <_svfiprintf_r+0x114>
 800616e:	eba0 0308 	sub.w	r3, r0, r8
 8006172:	fa09 f303 	lsl.w	r3, r9, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	46a2      	mov	sl, r4
 800617c:	e7d2      	b.n	8006124 <_svfiprintf_r+0xa0>
 800617e:	9b03      	ldr	r3, [sp, #12]
 8006180:	1d19      	adds	r1, r3, #4
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	9103      	str	r1, [sp, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfbb      	ittet	lt
 800618a:	425b      	neglt	r3, r3
 800618c:	f042 0202 	orrlt.w	r2, r2, #2
 8006190:	9307      	strge	r3, [sp, #28]
 8006192:	9307      	strlt	r3, [sp, #28]
 8006194:	bfb8      	it	lt
 8006196:	9204      	strlt	r2, [sp, #16]
 8006198:	7823      	ldrb	r3, [r4, #0]
 800619a:	2b2e      	cmp	r3, #46	@ 0x2e
 800619c:	d10a      	bne.n	80061b4 <_svfiprintf_r+0x130>
 800619e:	7863      	ldrb	r3, [r4, #1]
 80061a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a2:	d132      	bne.n	800620a <_svfiprintf_r+0x186>
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061b0:	3402      	adds	r4, #2
 80061b2:	9305      	str	r3, [sp, #20]
 80061b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006278 <_svfiprintf_r+0x1f4>
 80061b8:	7821      	ldrb	r1, [r4, #0]
 80061ba:	2203      	movs	r2, #3
 80061bc:	4650      	mov	r0, sl
 80061be:	f7fa f81f 	bl	8000200 <memchr>
 80061c2:	b138      	cbz	r0, 80061d4 <_svfiprintf_r+0x150>
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	eba0 000a 	sub.w	r0, r0, sl
 80061ca:	2240      	movs	r2, #64	@ 0x40
 80061cc:	4082      	lsls	r2, r0
 80061ce:	4313      	orrs	r3, r2
 80061d0:	3401      	adds	r4, #1
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	4824      	ldr	r0, [pc, #144]	@ (800626c <_svfiprintf_r+0x1e8>)
 80061da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061de:	2206      	movs	r2, #6
 80061e0:	f7fa f80e 	bl	8000200 <memchr>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d036      	beq.n	8006256 <_svfiprintf_r+0x1d2>
 80061e8:	4b21      	ldr	r3, [pc, #132]	@ (8006270 <_svfiprintf_r+0x1ec>)
 80061ea:	bb1b      	cbnz	r3, 8006234 <_svfiprintf_r+0x1b0>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	3307      	adds	r3, #7
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	3308      	adds	r3, #8
 80061f6:	9303      	str	r3, [sp, #12]
 80061f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fa:	4433      	add	r3, r6
 80061fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061fe:	e76a      	b.n	80060d6 <_svfiprintf_r+0x52>
 8006200:	fb0c 3202 	mla	r2, ip, r2, r3
 8006204:	460c      	mov	r4, r1
 8006206:	2001      	movs	r0, #1
 8006208:	e7a8      	b.n	800615c <_svfiprintf_r+0xd8>
 800620a:	2300      	movs	r3, #0
 800620c:	3401      	adds	r4, #1
 800620e:	9305      	str	r3, [sp, #20]
 8006210:	4619      	mov	r1, r3
 8006212:	f04f 0c0a 	mov.w	ip, #10
 8006216:	4620      	mov	r0, r4
 8006218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621c:	3a30      	subs	r2, #48	@ 0x30
 800621e:	2a09      	cmp	r2, #9
 8006220:	d903      	bls.n	800622a <_svfiprintf_r+0x1a6>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c6      	beq.n	80061b4 <_svfiprintf_r+0x130>
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	e7c4      	b.n	80061b4 <_svfiprintf_r+0x130>
 800622a:	fb0c 2101 	mla	r1, ip, r1, r2
 800622e:	4604      	mov	r4, r0
 8006230:	2301      	movs	r3, #1
 8006232:	e7f0      	b.n	8006216 <_svfiprintf_r+0x192>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4b0e      	ldr	r3, [pc, #56]	@ (8006274 <_svfiprintf_r+0x1f0>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4638      	mov	r0, r7
 8006240:	f3af 8000 	nop.w
 8006244:	1c42      	adds	r2, r0, #1
 8006246:	4606      	mov	r6, r0
 8006248:	d1d6      	bne.n	80061f8 <_svfiprintf_r+0x174>
 800624a:	89ab      	ldrh	r3, [r5, #12]
 800624c:	065b      	lsls	r3, r3, #25
 800624e:	f53f af2d 	bmi.w	80060ac <_svfiprintf_r+0x28>
 8006252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006254:	e72c      	b.n	80060b0 <_svfiprintf_r+0x2c>
 8006256:	ab03      	add	r3, sp, #12
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	462a      	mov	r2, r5
 800625c:	4b05      	ldr	r3, [pc, #20]	@ (8006274 <_svfiprintf_r+0x1f0>)
 800625e:	a904      	add	r1, sp, #16
 8006260:	4638      	mov	r0, r7
 8006262:	f000 f9bb 	bl	80065dc <_printf_i>
 8006266:	e7ed      	b.n	8006244 <_svfiprintf_r+0x1c0>
 8006268:	08006c40 	.word	0x08006c40
 800626c:	08006c4a 	.word	0x08006c4a
 8006270:	00000000 	.word	0x00000000
 8006274:	08005fcd 	.word	0x08005fcd
 8006278:	08006c46 	.word	0x08006c46

0800627c <__sfputc_r>:
 800627c:	6893      	ldr	r3, [r2, #8]
 800627e:	3b01      	subs	r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	b410      	push	{r4}
 8006284:	6093      	str	r3, [r2, #8]
 8006286:	da08      	bge.n	800629a <__sfputc_r+0x1e>
 8006288:	6994      	ldr	r4, [r2, #24]
 800628a:	42a3      	cmp	r3, r4
 800628c:	db01      	blt.n	8006292 <__sfputc_r+0x16>
 800628e:	290a      	cmp	r1, #10
 8006290:	d103      	bne.n	800629a <__sfputc_r+0x1e>
 8006292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006296:	f7ff bc88 	b.w	8005baa <__swbuf_r>
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	1c58      	adds	r0, r3, #1
 800629e:	6010      	str	r0, [r2, #0]
 80062a0:	7019      	strb	r1, [r3, #0]
 80062a2:	4608      	mov	r0, r1
 80062a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <__sfputs_r>:
 80062aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	18d5      	adds	r5, r2, r3
 80062b4:	42ac      	cmp	r4, r5
 80062b6:	d101      	bne.n	80062bc <__sfputs_r+0x12>
 80062b8:	2000      	movs	r0, #0
 80062ba:	e007      	b.n	80062cc <__sfputs_r+0x22>
 80062bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c0:	463a      	mov	r2, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff ffda 	bl	800627c <__sfputc_r>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d1f3      	bne.n	80062b4 <__sfputs_r+0xa>
 80062cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d0 <_vfiprintf_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	460d      	mov	r5, r1
 80062d6:	b09d      	sub	sp, #116	@ 0x74
 80062d8:	4614      	mov	r4, r2
 80062da:	4698      	mov	r8, r3
 80062dc:	4606      	mov	r6, r0
 80062de:	b118      	cbz	r0, 80062e8 <_vfiprintf_r+0x18>
 80062e0:	6a03      	ldr	r3, [r0, #32]
 80062e2:	b90b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x18>
 80062e4:	f7ff fb58 	bl	8005998 <__sinit>
 80062e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ea:	07d9      	lsls	r1, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_vfiprintf_r+0x2a>
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	059a      	lsls	r2, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_vfiprintf_r+0x2a>
 80062f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062f6:	f7ff fd66 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	071b      	lsls	r3, r3, #28
 80062fe:	d501      	bpl.n	8006304 <_vfiprintf_r+0x34>
 8006300:	692b      	ldr	r3, [r5, #16]
 8006302:	b99b      	cbnz	r3, 800632c <_vfiprintf_r+0x5c>
 8006304:	4629      	mov	r1, r5
 8006306:	4630      	mov	r0, r6
 8006308:	f7ff fc8e 	bl	8005c28 <__swsetup_r>
 800630c:	b170      	cbz	r0, 800632c <_vfiprintf_r+0x5c>
 800630e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006310:	07dc      	lsls	r4, r3, #31
 8006312:	d504      	bpl.n	800631e <_vfiprintf_r+0x4e>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b01d      	add	sp, #116	@ 0x74
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	0598      	lsls	r0, r3, #22
 8006322:	d4f7      	bmi.n	8006314 <_vfiprintf_r+0x44>
 8006324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006326:	f7ff fd4f 	bl	8005dc8 <__retarget_lock_release_recursive>
 800632a:	e7f3      	b.n	8006314 <_vfiprintf_r+0x44>
 800632c:	2300      	movs	r3, #0
 800632e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006330:	2320      	movs	r3, #32
 8006332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006336:	f8cd 800c 	str.w	r8, [sp, #12]
 800633a:	2330      	movs	r3, #48	@ 0x30
 800633c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064ec <_vfiprintf_r+0x21c>
 8006340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006344:	f04f 0901 	mov.w	r9, #1
 8006348:	4623      	mov	r3, r4
 800634a:	469a      	mov	sl, r3
 800634c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006350:	b10a      	cbz	r2, 8006356 <_vfiprintf_r+0x86>
 8006352:	2a25      	cmp	r2, #37	@ 0x25
 8006354:	d1f9      	bne.n	800634a <_vfiprintf_r+0x7a>
 8006356:	ebba 0b04 	subs.w	fp, sl, r4
 800635a:	d00b      	beq.n	8006374 <_vfiprintf_r+0xa4>
 800635c:	465b      	mov	r3, fp
 800635e:	4622      	mov	r2, r4
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffa1 	bl	80062aa <__sfputs_r>
 8006368:	3001      	adds	r0, #1
 800636a:	f000 80a7 	beq.w	80064bc <_vfiprintf_r+0x1ec>
 800636e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006370:	445a      	add	r2, fp
 8006372:	9209      	str	r2, [sp, #36]	@ 0x24
 8006374:	f89a 3000 	ldrb.w	r3, [sl]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 809f 	beq.w	80064bc <_vfiprintf_r+0x1ec>
 800637e:	2300      	movs	r3, #0
 8006380:	f04f 32ff 	mov.w	r2, #4294967295
 8006384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006388:	f10a 0a01 	add.w	sl, sl, #1
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	9307      	str	r3, [sp, #28]
 8006390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006394:	931a      	str	r3, [sp, #104]	@ 0x68
 8006396:	4654      	mov	r4, sl
 8006398:	2205      	movs	r2, #5
 800639a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639e:	4853      	ldr	r0, [pc, #332]	@ (80064ec <_vfiprintf_r+0x21c>)
 80063a0:	f7f9 ff2e 	bl	8000200 <memchr>
 80063a4:	9a04      	ldr	r2, [sp, #16]
 80063a6:	b9d8      	cbnz	r0, 80063e0 <_vfiprintf_r+0x110>
 80063a8:	06d1      	lsls	r1, r2, #27
 80063aa:	bf44      	itt	mi
 80063ac:	2320      	movmi	r3, #32
 80063ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063b2:	0713      	lsls	r3, r2, #28
 80063b4:	bf44      	itt	mi
 80063b6:	232b      	movmi	r3, #43	@ 0x2b
 80063b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063bc:	f89a 3000 	ldrb.w	r3, [sl]
 80063c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063c2:	d015      	beq.n	80063f0 <_vfiprintf_r+0x120>
 80063c4:	9a07      	ldr	r2, [sp, #28]
 80063c6:	4654      	mov	r4, sl
 80063c8:	2000      	movs	r0, #0
 80063ca:	f04f 0c0a 	mov.w	ip, #10
 80063ce:	4621      	mov	r1, r4
 80063d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d4:	3b30      	subs	r3, #48	@ 0x30
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d94b      	bls.n	8006472 <_vfiprintf_r+0x1a2>
 80063da:	b1b0      	cbz	r0, 800640a <_vfiprintf_r+0x13a>
 80063dc:	9207      	str	r2, [sp, #28]
 80063de:	e014      	b.n	800640a <_vfiprintf_r+0x13a>
 80063e0:	eba0 0308 	sub.w	r3, r0, r8
 80063e4:	fa09 f303 	lsl.w	r3, r9, r3
 80063e8:	4313      	orrs	r3, r2
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	46a2      	mov	sl, r4
 80063ee:	e7d2      	b.n	8006396 <_vfiprintf_r+0xc6>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	1d19      	adds	r1, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	9103      	str	r1, [sp, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfbb      	ittet	lt
 80063fc:	425b      	neglt	r3, r3
 80063fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006402:	9307      	strge	r3, [sp, #28]
 8006404:	9307      	strlt	r3, [sp, #28]
 8006406:	bfb8      	it	lt
 8006408:	9204      	strlt	r2, [sp, #16]
 800640a:	7823      	ldrb	r3, [r4, #0]
 800640c:	2b2e      	cmp	r3, #46	@ 0x2e
 800640e:	d10a      	bne.n	8006426 <_vfiprintf_r+0x156>
 8006410:	7863      	ldrb	r3, [r4, #1]
 8006412:	2b2a      	cmp	r3, #42	@ 0x2a
 8006414:	d132      	bne.n	800647c <_vfiprintf_r+0x1ac>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	1d1a      	adds	r2, r3, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	9203      	str	r2, [sp, #12]
 800641e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006422:	3402      	adds	r4, #2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064fc <_vfiprintf_r+0x22c>
 800642a:	7821      	ldrb	r1, [r4, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4650      	mov	r0, sl
 8006430:	f7f9 fee6 	bl	8000200 <memchr>
 8006434:	b138      	cbz	r0, 8006446 <_vfiprintf_r+0x176>
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	eba0 000a 	sub.w	r0, r0, sl
 800643c:	2240      	movs	r2, #64	@ 0x40
 800643e:	4082      	lsls	r2, r0
 8006440:	4313      	orrs	r3, r2
 8006442:	3401      	adds	r4, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644a:	4829      	ldr	r0, [pc, #164]	@ (80064f0 <_vfiprintf_r+0x220>)
 800644c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006450:	2206      	movs	r2, #6
 8006452:	f7f9 fed5 	bl	8000200 <memchr>
 8006456:	2800      	cmp	r0, #0
 8006458:	d03f      	beq.n	80064da <_vfiprintf_r+0x20a>
 800645a:	4b26      	ldr	r3, [pc, #152]	@ (80064f4 <_vfiprintf_r+0x224>)
 800645c:	bb1b      	cbnz	r3, 80064a6 <_vfiprintf_r+0x1d6>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	3307      	adds	r3, #7
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	3308      	adds	r3, #8
 8006468:	9303      	str	r3, [sp, #12]
 800646a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646c:	443b      	add	r3, r7
 800646e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006470:	e76a      	b.n	8006348 <_vfiprintf_r+0x78>
 8006472:	fb0c 3202 	mla	r2, ip, r2, r3
 8006476:	460c      	mov	r4, r1
 8006478:	2001      	movs	r0, #1
 800647a:	e7a8      	b.n	80063ce <_vfiprintf_r+0xfe>
 800647c:	2300      	movs	r3, #0
 800647e:	3401      	adds	r4, #1
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	4619      	mov	r1, r3
 8006484:	f04f 0c0a 	mov.w	ip, #10
 8006488:	4620      	mov	r0, r4
 800648a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800648e:	3a30      	subs	r2, #48	@ 0x30
 8006490:	2a09      	cmp	r2, #9
 8006492:	d903      	bls.n	800649c <_vfiprintf_r+0x1cc>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0c6      	beq.n	8006426 <_vfiprintf_r+0x156>
 8006498:	9105      	str	r1, [sp, #20]
 800649a:	e7c4      	b.n	8006426 <_vfiprintf_r+0x156>
 800649c:	fb0c 2101 	mla	r1, ip, r1, r2
 80064a0:	4604      	mov	r4, r0
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7f0      	b.n	8006488 <_vfiprintf_r+0x1b8>
 80064a6:	ab03      	add	r3, sp, #12
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	462a      	mov	r2, r5
 80064ac:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <_vfiprintf_r+0x228>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	4630      	mov	r0, r6
 80064b2:	f3af 8000 	nop.w
 80064b6:	4607      	mov	r7, r0
 80064b8:	1c78      	adds	r0, r7, #1
 80064ba:	d1d6      	bne.n	800646a <_vfiprintf_r+0x19a>
 80064bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064be:	07d9      	lsls	r1, r3, #31
 80064c0:	d405      	bmi.n	80064ce <_vfiprintf_r+0x1fe>
 80064c2:	89ab      	ldrh	r3, [r5, #12]
 80064c4:	059a      	lsls	r2, r3, #22
 80064c6:	d402      	bmi.n	80064ce <_vfiprintf_r+0x1fe>
 80064c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ca:	f7ff fc7d 	bl	8005dc8 <__retarget_lock_release_recursive>
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	065b      	lsls	r3, r3, #25
 80064d2:	f53f af1f 	bmi.w	8006314 <_vfiprintf_r+0x44>
 80064d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064d8:	e71e      	b.n	8006318 <_vfiprintf_r+0x48>
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462a      	mov	r2, r5
 80064e0:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <_vfiprintf_r+0x228>)
 80064e2:	a904      	add	r1, sp, #16
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f879 	bl	80065dc <_printf_i>
 80064ea:	e7e4      	b.n	80064b6 <_vfiprintf_r+0x1e6>
 80064ec:	08006c40 	.word	0x08006c40
 80064f0:	08006c4a 	.word	0x08006c4a
 80064f4:	00000000 	.word	0x00000000
 80064f8:	080062ab 	.word	0x080062ab
 80064fc:	08006c46 	.word	0x08006c46

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4698      	mov	r8, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	3b00      	subs	r3, #0
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800655c:	4641      	mov	r1, r8
 800655e:	4638      	mov	r0, r7
 8006560:	47c8      	blx	r9
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf02      	ittt	eq
 8006572:	68e5      	ldreq	r5, [r4, #12]
 8006574:	6833      	ldreq	r3, [r6, #0]
 8006576:	1aed      	subeq	r5, r5, r3
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4641      	mov	r1, r8
 800659c:	4638      	mov	r0, r7
 800659e:	47c8      	blx	r9
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	@ 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	7e0f      	ldrb	r7, [r1, #24]
 80065e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065e4:	2f78      	cmp	r7, #120	@ 0x78
 80065e6:	4691      	mov	r9, r2
 80065e8:	4680      	mov	r8, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	469a      	mov	sl, r3
 80065ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	@ 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d2 	beq.w	80067a2 <_printf_i+0x1c6>
 80065fe:	2f58      	cmp	r7, #88	@ 0x58
 8006600:	f000 80b9 	beq.w	8006776 <_printf_i+0x19a>
 8006604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a101      	add	r1, pc, #4	@ (adr r1, 800661c <_printf_i+0x40>)
 8006618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006789 	.word	0x08006789
 800664c:	080066b3 	.word	0x080066b3
 8006650:	08006743 	.word	0x08006743
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067ab 	.word	0x080067ab
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b3 	.word	0x080066b3
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	0800674b 	.word	0x0800674b
 8006674:	6833      	ldr	r3, [r6, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6032      	str	r2, [r6, #0]
 800667c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e09d      	b.n	80067c4 <_printf_i+0x1e8>
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	6031      	str	r1, [r6, #0]
 8006690:	0606      	lsls	r6, r0, #24
 8006692:	d501      	bpl.n	8006698 <_printf_i+0xbc>
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	e003      	b.n	80066a0 <_printf_i+0xc4>
 8006698:	0645      	lsls	r5, r0, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0xb8>
 800669c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	da03      	bge.n	80066ac <_printf_i+0xd0>
 80066a4:	232d      	movs	r3, #45	@ 0x2d
 80066a6:	426d      	negs	r5, r5
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ac:	4859      	ldr	r0, [pc, #356]	@ (8006814 <_printf_i+0x238>)
 80066ae:	230a      	movs	r3, #10
 80066b0:	e011      	b.n	80066d6 <_printf_i+0xfa>
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	6833      	ldr	r3, [r6, #0]
 80066b6:	0608      	lsls	r0, r1, #24
 80066b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066bc:	d402      	bmi.n	80066c4 <_printf_i+0xe8>
 80066be:	0649      	lsls	r1, r1, #25
 80066c0:	bf48      	it	mi
 80066c2:	b2ad      	uxthmi	r5, r5
 80066c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c6:	4853      	ldr	r0, [pc, #332]	@ (8006814 <_printf_i+0x238>)
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	bf14      	ite	ne
 80066cc:	230a      	movne	r3, #10
 80066ce:	2308      	moveq	r3, #8
 80066d0:	2100      	movs	r1, #0
 80066d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d6:	6866      	ldr	r6, [r4, #4]
 80066d8:	60a6      	str	r6, [r4, #8]
 80066da:	2e00      	cmp	r6, #0
 80066dc:	bfa2      	ittt	ge
 80066de:	6821      	ldrge	r1, [r4, #0]
 80066e0:	f021 0104 	bicge.w	r1, r1, #4
 80066e4:	6021      	strge	r1, [r4, #0]
 80066e6:	b90d      	cbnz	r5, 80066ec <_printf_i+0x110>
 80066e8:	2e00      	cmp	r6, #0
 80066ea:	d04b      	beq.n	8006784 <_printf_i+0x1a8>
 80066ec:	4616      	mov	r6, r2
 80066ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80066f2:	fb03 5711 	mls	r7, r3, r1, r5
 80066f6:	5dc7      	ldrb	r7, [r0, r7]
 80066f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066fc:	462f      	mov	r7, r5
 80066fe:	42bb      	cmp	r3, r7
 8006700:	460d      	mov	r5, r1
 8006702:	d9f4      	bls.n	80066ee <_printf_i+0x112>
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10b      	bne.n	8006720 <_printf_i+0x144>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	07df      	lsls	r7, r3, #31
 800670c:	d508      	bpl.n	8006720 <_printf_i+0x144>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6861      	ldr	r1, [r4, #4]
 8006712:	4299      	cmp	r1, r3
 8006714:	bfde      	ittt	le
 8006716:	2330      	movle	r3, #48	@ 0x30
 8006718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800671c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006720:	1b92      	subs	r2, r2, r6
 8006722:	6122      	str	r2, [r4, #16]
 8006724:	f8cd a000 	str.w	sl, [sp]
 8006728:	464b      	mov	r3, r9
 800672a:	aa03      	add	r2, sp, #12
 800672c:	4621      	mov	r1, r4
 800672e:	4640      	mov	r0, r8
 8006730:	f7ff fee6 	bl	8006500 <_printf_common>
 8006734:	3001      	adds	r0, #1
 8006736:	d14a      	bne.n	80067ce <_printf_i+0x1f2>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	b004      	add	sp, #16
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	4833      	ldr	r0, [pc, #204]	@ (8006818 <_printf_i+0x23c>)
 800674c:	2778      	movs	r7, #120	@ 0x78
 800674e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6831      	ldr	r1, [r6, #0]
 8006756:	061f      	lsls	r7, r3, #24
 8006758:	f851 5b04 	ldr.w	r5, [r1], #4
 800675c:	d402      	bmi.n	8006764 <_printf_i+0x188>
 800675e:	065f      	lsls	r7, r3, #25
 8006760:	bf48      	it	mi
 8006762:	b2ad      	uxthmi	r5, r5
 8006764:	6031      	str	r1, [r6, #0]
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	bf44      	itt	mi
 800676a:	f043 0320 	orrmi.w	r3, r3, #32
 800676e:	6023      	strmi	r3, [r4, #0]
 8006770:	b11d      	cbz	r5, 800677a <_printf_i+0x19e>
 8006772:	2310      	movs	r3, #16
 8006774:	e7ac      	b.n	80066d0 <_printf_i+0xf4>
 8006776:	4827      	ldr	r0, [pc, #156]	@ (8006814 <_printf_i+0x238>)
 8006778:	e7e9      	b.n	800674e <_printf_i+0x172>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f023 0320 	bic.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	e7f6      	b.n	8006772 <_printf_i+0x196>
 8006784:	4616      	mov	r6, r2
 8006786:	e7bd      	b.n	8006704 <_printf_i+0x128>
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	6825      	ldr	r5, [r4, #0]
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	1d18      	adds	r0, r3, #4
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	062e      	lsls	r6, r5, #24
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	d501      	bpl.n	800679c <_printf_i+0x1c0>
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0x1c6>
 800679c:	0668      	lsls	r0, r5, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0x1bc>
 80067a0:	8019      	strh	r1, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	4616      	mov	r6, r2
 80067a8:	e7bc      	b.n	8006724 <_printf_i+0x148>
 80067aa:	6833      	ldr	r3, [r6, #0]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	6032      	str	r2, [r6, #0]
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7f9 fd22 	bl	8000200 <memchr>
 80067bc:	b108      	cbz	r0, 80067c2 <_printf_i+0x1e6>
 80067be:	1b80      	subs	r0, r0, r6
 80067c0:	6060      	str	r0, [r4, #4]
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2300      	movs	r3, #0
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067cc:	e7aa      	b.n	8006724 <_printf_i+0x148>
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	4632      	mov	r2, r6
 80067d2:	4649      	mov	r1, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	47d0      	blx	sl
 80067d8:	3001      	adds	r0, #1
 80067da:	d0ad      	beq.n	8006738 <_printf_i+0x15c>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	d413      	bmi.n	800680a <_printf_i+0x22e>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e7a6      	b.n	800673c <_printf_i+0x160>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d09d      	beq.n	8006738 <_printf_i+0x15c>
 80067fc:	3501      	adds	r5, #1
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	42ab      	cmp	r3, r5
 8006806:	dcf2      	bgt.n	80067ee <_printf_i+0x212>
 8006808:	e7eb      	b.n	80067e2 <_printf_i+0x206>
 800680a:	2500      	movs	r5, #0
 800680c:	f104 0619 	add.w	r6, r4, #25
 8006810:	e7f5      	b.n	80067fe <_printf_i+0x222>
 8006812:	bf00      	nop
 8006814:	08006c51 	.word	0x08006c51
 8006818:	08006c62 	.word	0x08006c62

0800681c <__sflush_r>:
 800681c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	0716      	lsls	r6, r2, #28
 8006826:	4605      	mov	r5, r0
 8006828:	460c      	mov	r4, r1
 800682a:	d454      	bmi.n	80068d6 <__sflush_r+0xba>
 800682c:	684b      	ldr	r3, [r1, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	dc02      	bgt.n	8006838 <__sflush_r+0x1c>
 8006832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	dd48      	ble.n	80068ca <__sflush_r+0xae>
 8006838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800683a:	2e00      	cmp	r6, #0
 800683c:	d045      	beq.n	80068ca <__sflush_r+0xae>
 800683e:	2300      	movs	r3, #0
 8006840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006844:	682f      	ldr	r7, [r5, #0]
 8006846:	6a21      	ldr	r1, [r4, #32]
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	d030      	beq.n	80068ae <__sflush_r+0x92>
 800684c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	0759      	lsls	r1, r3, #29
 8006852:	d505      	bpl.n	8006860 <__sflush_r+0x44>
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	1ad2      	subs	r2, r2, r3
 8006858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800685a:	b10b      	cbz	r3, 8006860 <__sflush_r+0x44>
 800685c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006864:	6a21      	ldr	r1, [r4, #32]
 8006866:	4628      	mov	r0, r5
 8006868:	47b0      	blx	r6
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	d106      	bne.n	800687e <__sflush_r+0x62>
 8006870:	6829      	ldr	r1, [r5, #0]
 8006872:	291d      	cmp	r1, #29
 8006874:	d82b      	bhi.n	80068ce <__sflush_r+0xb2>
 8006876:	4a2a      	ldr	r2, [pc, #168]	@ (8006920 <__sflush_r+0x104>)
 8006878:	410a      	asrs	r2, r1
 800687a:	07d6      	lsls	r6, r2, #31
 800687c:	d427      	bmi.n	80068ce <__sflush_r+0xb2>
 800687e:	2200      	movs	r2, #0
 8006880:	6062      	str	r2, [r4, #4]
 8006882:	04d9      	lsls	r1, r3, #19
 8006884:	6922      	ldr	r2, [r4, #16]
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	d504      	bpl.n	8006894 <__sflush_r+0x78>
 800688a:	1c42      	adds	r2, r0, #1
 800688c:	d101      	bne.n	8006892 <__sflush_r+0x76>
 800688e:	682b      	ldr	r3, [r5, #0]
 8006890:	b903      	cbnz	r3, 8006894 <__sflush_r+0x78>
 8006892:	6560      	str	r0, [r4, #84]	@ 0x54
 8006894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006896:	602f      	str	r7, [r5, #0]
 8006898:	b1b9      	cbz	r1, 80068ca <__sflush_r+0xae>
 800689a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800689e:	4299      	cmp	r1, r3
 80068a0:	d002      	beq.n	80068a8 <__sflush_r+0x8c>
 80068a2:	4628      	mov	r0, r5
 80068a4:	f7ff fa9a 	bl	8005ddc <_free_r>
 80068a8:	2300      	movs	r3, #0
 80068aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ac:	e00d      	b.n	80068ca <__sflush_r+0xae>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b0      	blx	r6
 80068b4:	4602      	mov	r2, r0
 80068b6:	1c50      	adds	r0, r2, #1
 80068b8:	d1c9      	bne.n	800684e <__sflush_r+0x32>
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0c6      	beq.n	800684e <__sflush_r+0x32>
 80068c0:	2b1d      	cmp	r3, #29
 80068c2:	d001      	beq.n	80068c8 <__sflush_r+0xac>
 80068c4:	2b16      	cmp	r3, #22
 80068c6:	d11e      	bne.n	8006906 <__sflush_r+0xea>
 80068c8:	602f      	str	r7, [r5, #0]
 80068ca:	2000      	movs	r0, #0
 80068cc:	e022      	b.n	8006914 <__sflush_r+0xf8>
 80068ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068d2:	b21b      	sxth	r3, r3
 80068d4:	e01b      	b.n	800690e <__sflush_r+0xf2>
 80068d6:	690f      	ldr	r7, [r1, #16]
 80068d8:	2f00      	cmp	r7, #0
 80068da:	d0f6      	beq.n	80068ca <__sflush_r+0xae>
 80068dc:	0793      	lsls	r3, r2, #30
 80068de:	680e      	ldr	r6, [r1, #0]
 80068e0:	bf08      	it	eq
 80068e2:	694b      	ldreq	r3, [r1, #20]
 80068e4:	600f      	str	r7, [r1, #0]
 80068e6:	bf18      	it	ne
 80068e8:	2300      	movne	r3, #0
 80068ea:	eba6 0807 	sub.w	r8, r6, r7
 80068ee:	608b      	str	r3, [r1, #8]
 80068f0:	f1b8 0f00 	cmp.w	r8, #0
 80068f4:	dde9      	ble.n	80068ca <__sflush_r+0xae>
 80068f6:	6a21      	ldr	r1, [r4, #32]
 80068f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068fa:	4643      	mov	r3, r8
 80068fc:	463a      	mov	r2, r7
 80068fe:	4628      	mov	r0, r5
 8006900:	47b0      	blx	r6
 8006902:	2800      	cmp	r0, #0
 8006904:	dc08      	bgt.n	8006918 <__sflush_r+0xfc>
 8006906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006918:	4407      	add	r7, r0
 800691a:	eba8 0800 	sub.w	r8, r8, r0
 800691e:	e7e7      	b.n	80068f0 <__sflush_r+0xd4>
 8006920:	dfbffffe 	.word	0xdfbffffe

08006924 <_fflush_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	690b      	ldr	r3, [r1, #16]
 8006928:	4605      	mov	r5, r0
 800692a:	460c      	mov	r4, r1
 800692c:	b913      	cbnz	r3, 8006934 <_fflush_r+0x10>
 800692e:	2500      	movs	r5, #0
 8006930:	4628      	mov	r0, r5
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	b118      	cbz	r0, 800693e <_fflush_r+0x1a>
 8006936:	6a03      	ldr	r3, [r0, #32]
 8006938:	b90b      	cbnz	r3, 800693e <_fflush_r+0x1a>
 800693a:	f7ff f82d 	bl	8005998 <__sinit>
 800693e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f3      	beq.n	800692e <_fflush_r+0xa>
 8006946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006948:	07d0      	lsls	r0, r2, #31
 800694a:	d404      	bmi.n	8006956 <_fflush_r+0x32>
 800694c:	0599      	lsls	r1, r3, #22
 800694e:	d402      	bmi.n	8006956 <_fflush_r+0x32>
 8006950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006952:	f7ff fa38 	bl	8005dc6 <__retarget_lock_acquire_recursive>
 8006956:	4628      	mov	r0, r5
 8006958:	4621      	mov	r1, r4
 800695a:	f7ff ff5f 	bl	800681c <__sflush_r>
 800695e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006960:	07da      	lsls	r2, r3, #31
 8006962:	4605      	mov	r5, r0
 8006964:	d4e4      	bmi.n	8006930 <_fflush_r+0xc>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d4e1      	bmi.n	8006930 <_fflush_r+0xc>
 800696c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800696e:	f7ff fa2b 	bl	8005dc8 <__retarget_lock_release_recursive>
 8006972:	e7dd      	b.n	8006930 <_fflush_r+0xc>

08006974 <__swhatbuf_r>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	460c      	mov	r4, r1
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	2900      	cmp	r1, #0
 800697e:	b096      	sub	sp, #88	@ 0x58
 8006980:	4615      	mov	r5, r2
 8006982:	461e      	mov	r6, r3
 8006984:	da0d      	bge.n	80069a2 <__swhatbuf_r+0x2e>
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800698c:	f04f 0100 	mov.w	r1, #0
 8006990:	bf14      	ite	ne
 8006992:	2340      	movne	r3, #64	@ 0x40
 8006994:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006998:	2000      	movs	r0, #0
 800699a:	6031      	str	r1, [r6, #0]
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	b016      	add	sp, #88	@ 0x58
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	466a      	mov	r2, sp
 80069a4:	f000 f862 	bl	8006a6c <_fstat_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	dbec      	blt.n	8006986 <__swhatbuf_r+0x12>
 80069ac:	9901      	ldr	r1, [sp, #4]
 80069ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069b6:	4259      	negs	r1, r3
 80069b8:	4159      	adcs	r1, r3
 80069ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069be:	e7eb      	b.n	8006998 <__swhatbuf_r+0x24>

080069c0 <__smakebuf_r>:
 80069c0:	898b      	ldrh	r3, [r1, #12]
 80069c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c4:	079d      	lsls	r5, r3, #30
 80069c6:	4606      	mov	r6, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	d507      	bpl.n	80069dc <__smakebuf_r+0x1c>
 80069cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2301      	movs	r3, #1
 80069d6:	6163      	str	r3, [r4, #20]
 80069d8:	b003      	add	sp, #12
 80069da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069dc:	ab01      	add	r3, sp, #4
 80069de:	466a      	mov	r2, sp
 80069e0:	f7ff ffc8 	bl	8006974 <__swhatbuf_r>
 80069e4:	9f00      	ldr	r7, [sp, #0]
 80069e6:	4605      	mov	r5, r0
 80069e8:	4639      	mov	r1, r7
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff fa62 	bl	8005eb4 <_malloc_r>
 80069f0:	b948      	cbnz	r0, 8006a06 <__smakebuf_r+0x46>
 80069f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f6:	059a      	lsls	r2, r3, #22
 80069f8:	d4ee      	bmi.n	80069d8 <__smakebuf_r+0x18>
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	e7e2      	b.n	80069cc <__smakebuf_r+0xc>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	6020      	str	r0, [r4, #0]
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a16:	b15b      	cbz	r3, 8006a30 <__smakebuf_r+0x70>
 8006a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f837 	bl	8006a90 <_isatty_r>
 8006a22:	b128      	cbz	r0, 8006a30 <__smakebuf_r+0x70>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	431d      	orrs	r5, r3
 8006a34:	81a5      	strh	r5, [r4, #12]
 8006a36:	e7cf      	b.n	80069d8 <__smakebuf_r+0x18>

08006a38 <memmove>:
 8006a38:	4288      	cmp	r0, r1
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	eb01 0402 	add.w	r4, r1, r2
 8006a40:	d902      	bls.n	8006a48 <memmove+0x10>
 8006a42:	4284      	cmp	r4, r0
 8006a44:	4623      	mov	r3, r4
 8006a46:	d807      	bhi.n	8006a58 <memmove+0x20>
 8006a48:	1e43      	subs	r3, r0, #1
 8006a4a:	42a1      	cmp	r1, r4
 8006a4c:	d008      	beq.n	8006a60 <memmove+0x28>
 8006a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a56:	e7f8      	b.n	8006a4a <memmove+0x12>
 8006a58:	4402      	add	r2, r0
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	428a      	cmp	r2, r1
 8006a5e:	d100      	bne.n	8006a62 <memmove+0x2a>
 8006a60:	bd10      	pop	{r4, pc}
 8006a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a6a:	e7f7      	b.n	8006a5c <memmove+0x24>

08006a6c <_fstat_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	@ (8006a8c <_fstat_r+0x20>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f7fb f886 	bl	8001b8a <_fstat>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d102      	bne.n	8006a88 <_fstat_r+0x1c>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	b103      	cbz	r3, 8006a88 <_fstat_r+0x1c>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000470 	.word	0x20000470

08006a90 <_isatty_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d06      	ldr	r5, [pc, #24]	@ (8006aac <_isatty_r+0x1c>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	602b      	str	r3, [r5, #0]
 8006a9c:	f7fb f885 	bl	8001baa <_isatty>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_isatty_r+0x1a>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_isatty_r+0x1a>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	20000470 	.word	0x20000470

08006ab0 <_sbrk_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	4d06      	ldr	r5, [pc, #24]	@ (8006acc <_sbrk_r+0x1c>)
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	4608      	mov	r0, r1
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	f7fb f88e 	bl	8001bdc <_sbrk>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <_sbrk_r+0x1a>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	b103      	cbz	r3, 8006aca <_sbrk_r+0x1a>
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	bd38      	pop	{r3, r4, r5, pc}
 8006acc:	20000470 	.word	0x20000470

08006ad0 <memcpy>:
 8006ad0:	440a      	add	r2, r1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad8:	d100      	bne.n	8006adc <memcpy+0xc>
 8006ada:	4770      	bx	lr
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae6:	4291      	cmp	r1, r2
 8006ae8:	d1f9      	bne.n	8006ade <memcpy+0xe>
 8006aea:	bd10      	pop	{r4, pc}

08006aec <_realloc_r>:
 8006aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af0:	4680      	mov	r8, r0
 8006af2:	4615      	mov	r5, r2
 8006af4:	460c      	mov	r4, r1
 8006af6:	b921      	cbnz	r1, 8006b02 <_realloc_r+0x16>
 8006af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006afc:	4611      	mov	r1, r2
 8006afe:	f7ff b9d9 	b.w	8005eb4 <_malloc_r>
 8006b02:	b92a      	cbnz	r2, 8006b10 <_realloc_r+0x24>
 8006b04:	f7ff f96a 	bl	8005ddc <_free_r>
 8006b08:	2400      	movs	r4, #0
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	f000 f81a 	bl	8006b48 <_malloc_usable_size_r>
 8006b14:	4285      	cmp	r5, r0
 8006b16:	4606      	mov	r6, r0
 8006b18:	d802      	bhi.n	8006b20 <_realloc_r+0x34>
 8006b1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b1e:	d8f4      	bhi.n	8006b0a <_realloc_r+0x1e>
 8006b20:	4629      	mov	r1, r5
 8006b22:	4640      	mov	r0, r8
 8006b24:	f7ff f9c6 	bl	8005eb4 <_malloc_r>
 8006b28:	4607      	mov	r7, r0
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d0ec      	beq.n	8006b08 <_realloc_r+0x1c>
 8006b2e:	42b5      	cmp	r5, r6
 8006b30:	462a      	mov	r2, r5
 8006b32:	4621      	mov	r1, r4
 8006b34:	bf28      	it	cs
 8006b36:	4632      	movcs	r2, r6
 8006b38:	f7ff ffca 	bl	8006ad0 <memcpy>
 8006b3c:	4621      	mov	r1, r4
 8006b3e:	4640      	mov	r0, r8
 8006b40:	f7ff f94c 	bl	8005ddc <_free_r>
 8006b44:	463c      	mov	r4, r7
 8006b46:	e7e0      	b.n	8006b0a <_realloc_r+0x1e>

08006b48 <_malloc_usable_size_r>:
 8006b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4c:	1f18      	subs	r0, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfbc      	itt	lt
 8006b52:	580b      	ldrlt	r3, [r1, r0]
 8006b54:	18c0      	addlt	r0, r0, r3
 8006b56:	4770      	bx	lr

08006b58 <_init>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	bf00      	nop
 8006b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5e:	bc08      	pop	{r3}
 8006b60:	469e      	mov	lr, r3
 8006b62:	4770      	bx	lr

08006b64 <_fini>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr
